// Code generated by go-bindata.
// sources:
// .build/assets/close.svg
// .build/assets/edit.css
// .build/assets/edit.html
// .build/assets/edit.js
// .build/assets/index.js
// .build/assets/links.css
// .build/assets/links.html
// DO NOT EDIT!

package web

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _closeSvg = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\x8e\xc1\x8a\x84\x30\x0c\x86\x5f\x25\xe4\xbe\x69\x9b\x62\xcd\x2e\xd6\xc3\x9e\xdd\x87\x58\x50\x5a\xc1\x19\x65\x2c\x56\xe6\xe9\x87\x56\x2f\x3f\xe1\xfb\xbf\x84\x74\xfb\x11\xe0\x7c\x2c\xcf\xdd\x63\x4c\x69\xfb\x51\x2a\xe7\x4c\xd9\xd2\xfa\x0a\x8a\xb5\xd6\x6a\x3f\x02\x42\x9e\xc7\x14\x3d\x5a\x87\x10\xa7\x39\xc4\x74\xcd\xc7\x3c\xe5\xdf\xf5\xf4\xa8\x41\x83\x75\x60\x1d\xf6\xdd\xf6\x9f\x22\x8c\x1e\xff\x58\xa8\x81\x6f\x72\x3c\xb0\x23\x2b\xd0\x52\x03\x46\xc0\x34\x24\x52\x79\x25\xed\x2d\xdd\xdc\x5c\x5e\xdd\x58\x98\x0c\x43\x89\xc1\x08\xb0\x26\xc3\x8b\x94\x4b\x35\x0a\xff\xaa\x65\x6d\xc0\xc8\x1b\x55\xdf\x95\x87\xfb\x4f\x00\x00\x00\xff\xff\xe5\x79\xbd\x91\xd8\x00\x00\x00"

func closeSvgBytes() ([]byte, error) {
	return bindataRead(
		_closeSvg,
		"close.svg",
	)
}

func closeSvg() (*asset, error) {
	bytes, err := closeSvgBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "close.svg", size: 216, mode: os.FileMode(436), modTime: time.Unix(1517201887, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _editCss = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x94\xe1\x6e\xc3\x26\x10\xc7\xbf\xef\x29\x50\xa3\xa9\x89\x14\x5c\x92\x36\x69\x83\xa5\x3d\xc4\xbe\xed\x23\x86\xb3\x8d\x8a\x39\x04\x38\x71\x6a\xf9\xdd\x27\xdb\x24\xf1\xd6\x4e\xd3\x34\x59\x91\x08\xfc\xe0\xb8\xff\xfd\x8f\x02\xd5\xb5\x2f\x84\xfc\xac\x3c\xb6\x56\xf1\x55\x59\x96\x79\x89\x36\xd2\x52\x34\xda\x5c\xf9\xf3\xef\xc2\xc0\x45\x5c\x9f\xb7\x24\x08\x1b\x68\x00\xaf\x13\x11\xf4\x17\xf0\xb7\xbd\xeb\xe6\xbf\x17\xd0\x55\x1d\xf9\x2b\x63\x43\x89\xbe\xe9\x23\x74\x91\x0a\xa3\x2b\xcb\x25\xd8\x08\x7e\x58\x15\xc2\xf7\x17\xad\x62\xcd\x8f\x87\x71\x5f\x23\x7c\xa5\x2d\x67\x44\xb4\x11\x73\x87\x41\x47\x8d\x96\x7b\x30\x22\xea\x33\x0c\x2b\xa3\xed\x67\x48\x5b\x76\x8c\xfd\x9a\x2f\x0e\xf5\x63\xb8\x3c\x7a\x61\xd3\xb6\x69\x38\x86\x26\x7b\xc6\x9a\x40\x40\x04\xa0\xda\x52\x6c\x13\x36\xae\xf1\x20\x85\x81\x3f\xd6\x6c\x33\x64\xb5\xb6\xb1\x7f\xa4\xb2\xfb\x70\x5d\x2e\xd1\xa0\xe7\x95\x87\x6b\xba\x1d\x9d\xe2\xf0\x83\x8b\x43\x56\x6a\x30\xaa\xff\x2f\xf2\xbc\xfe\x20\x4f\xee\x84\x52\xda\x56\x7c\x7f\xb8\x07\x5c\x9d\x4e\xa7\xbc\x40\xaf\xc0\x53\x2f\x94\x6e\x03\x7f\x73\x5d\x9a\xe1\x3b\xd7\x91\x80\x46\x2b\xb2\x92\x52\xe6\xd8\x46\xa3\x2d\x70\x8b\x16\xf2\x02\x3b\x1a\x6a\xa1\xf0\xc2\x19\xd9\xbb\x8e\x1c\x5d\x47\x7c\x55\x88\x35\xdb\x4e\x5f\xb6\xdf\xe4\x49\x74\xc6\x5c\x37\x64\xa1\x46\x1f\x5b\x6f\xfa\xe5\xbd\x0a\x34\x6a\xc8\x82\x13\x12\x7c\x5f\xcf\x73\x1f\x13\x3e\x25\xcd\x4b\x94\x6d\xe8\xbf\xdf\x87\x9d\xca\x1b\xc2\xe9\x05\x8a\x4f\x1d\xa9\xb6\xae\x8d\xd4\x19\x21\xa1\x46\xa3\xc0\xf7\x29\x49\xa5\xd4\x03\x6e\xf0\xeb\x9f\x98\x95\x6c\x5c\xff\x17\x95\xe6\x04\x0e\x47\xf6\xcd\x35\x0b\x47\x18\x28\xe3\x42\xfb\xfd\xce\x75\xff\xc3\x1f\x8f\x39\x8a\x5e\x8f\x11\x23\x3a\x32\x5b\xf9\x56\xaa\x02\x63\xc4\x86\x8e\x81\xbf\x97\xed\xb6\x3a\x19\xe8\x5f\xab\x3a\x25\x9d\x8d\x86\x5f\xf4\x23\x4d\xa2\x94\xc7\xf1\x9b\x91\xb2\x95\x3f\x22\x00\x0b\x2f\x4d\xe8\x6f\xe2\x26\x2a\x3b\x95\xb3\x50\x0a\x24\x7a\x31\xc9\x31\xba\x67\xc6\xb2\xda\xc6\x85\xfc\x33\x99\x3c\x35\x5e\x72\xfc\x31\x32\x3e\x0d\x0b\xbe\x34\x28\xe2\xdc\x84\xc3\x4a\x9a\xd0\xdf\xdb\x57\x14\x01\x4d\x1b\x21\x8f\xe8\xf8\x6e\x6c\x80\xb9\x85\xd8\xcd\x86\xa3\x06\xc9\x62\xd3\x78\x91\x8c\x6e\x44\x05\xbc\xf5\x66\xfd\xf4\x12\x5e\xa4\xc1\x00\x59\x38\x57\x4f\x9b\x25\x74\x8f\x34\x17\xe3\x5e\x93\x07\xe1\xc1\x81\x88\xdc\x62\x1a\x2d\xd7\xe6\x67\xeb\xc3\x75\xe4\x6d\x6a\xf8\xd6\x07\xf4\xdc\xa1\x9e\x0e\x59\xf8\x05\x9d\x90\x3a\x5e\x93\x5b\x64\x5b\x68\x49\x0b\xf8\xd2\xe0\xd7\x2c\x7b\x7f\xdf\x12\xb6\x25\x2c\xdb\xbd\x1f\xb6\x64\xb7\xc9\x13\xcd\x59\x9e\x8e\xa2\x70\x06\x1b\xc3\x4d\x67\x13\xb2\xb3\x0e\xfd\x1d\xcb\x5e\xff\x0e\x6a\x5b\x83\xd7\xb3\x9a\xbc\xc6\x33\xf8\x05\x7d\x1c\x7e\xf9\x33\x00\x00\xff\xff\x07\x44\xb6\x4b\xac\x05\x00\x00"

func editCssBytes() ([]byte, error) {
	return bindataRead(
		_editCss,
		"edit.css",
	)
}

func editCss() (*asset, error) {
	bytes, err := editCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "edit.css", size: 1452, mode: os.FileMode(436), modTime: time.Unix(1517205391, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _editHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x94\x41\x6f\xd4\x3c\x10\x86\xef\xfd\x15\xf3\xf9\xf4\x21\xb1\xf1\x4a\x70\x40\x8b\x13\x0e\xed\x52\x21\x55\x14\xb5\xdb\x03\x27\xe4\x75\x26\x1b\x53\xc7\x36\xf6\x64\x4b\xfe\x3d\xf2\x3a\xbb\x9b\x50\x81\x80\x5c\x62\xcf\x68\xde\x79\x3c\x7e\x13\xf1\xdf\xd5\xed\xe5\xe6\xf3\xa7\x35\xb4\xd4\x99\xea\x42\xe4\x17\x80\x68\x51\xd6\x69\x01\x20\x48\x93\xc1\xea\xda\x09\x9e\x57\x39\xda\x21\x49\x68\x89\xfc\x02\xbf\xf5\x7a\x5f\xb2\x4b\x67\x09\x2d\x2d\x36\x83\x47\x06\x2a\xef\x4a\x46\xf8\x9d\x78\x92\x7d\x0b\xaa\x95\x21\x22\x95\x3d\x35\x8b\x37\x8c\x8f\x42\x46\xdb\x47\x68\x03\x36\x25\xe3\x91\x63\xad\xa9\x50\x31\xb2\x43\x32\x3d\x01\x4d\xc9\x22\x0d\x06\x63\x8b\x48\xe7\x04\x0d\x1e\x47\xfd\x54\xf0\x5c\x2e\xd1\xc5\x15\xe7\x8d\xb3\x14\x8b\x9d\x73\x3b\x83\xd2\xeb\x58\x28\xd7\xa5\x92\x77\x8d\xec\xb4\x19\xca\x3b\x69\xf0\x49\x0e\xab\xd7\xcb\xe5\xcb\x57\xcb\xe5\xbf\xb5\x16\xfc\x38\x32\xb1\x75\xf5\x30\xd2\x34\x2e\x74\x20\x7b\x72\xca\x75\xde\x20\x61\xc9\x5c\xd3\x8c\xac\x00\xa2\xd6\x7b\xd0\x75\xc9\xb6\x32\x9c\x82\x93\xb0\x32\x91\x55\x82\xd7\x7a\x3f\x49\x6a\xeb\x7b\x9a\x20\x30\x50\x46\xc6\x58\xb2\x46\xa3\xa9\xd9\xa1\xb0\x0f\x86\x81\x37\x52\x61\xeb\x4c\x8d\xa1\x64\x6b\x4b\x18\x80\x5a\x84\x3e\x18\x20\x07\xb1\x75\x81\xd0\x26\xfd\x83\x62\x75\x31\xef\x3f\x8a\x46\x2f\x15\x86\x13\xc5\x9f\x62\x64\xf9\x03\x46\xe2\x39\xef\x66\x50\x57\x18\x75\xc0\x1a\xee\x33\x0b\xd6\xf0\x70\x77\x33\x25\x7a\x3e\x92\x74\xbf\x71\x32\x2b\x00\x11\xbd\xb4\xc7\xe6\xad\xb6\xc4\xaa\xf7\xc1\x75\x70\x7b\xf3\xe1\x23\xfc\xef\xf2\xa1\x75\x3a\xbe\x95\x06\x2c\xd2\x93\x0b\x8f\x2f\x56\x82\xa7\xba\x4a\x6c\xc3\x54\x6c\xe7\xf8\x4c\xef\x08\x0e\xa8\x5a\xc7\xaa\xa2\x28\xc6\x3a\x3e\x25\x98\x6b\xfc\x0e\xe8\xcb\xf5\xc3\xfa\x7e\xf3\x13\x16\xd2\xaf\x71\x0a\x67\xb4\x2d\xb6\xbd\x36\xf5\x5f\x93\xcd\x9c\x33\xdf\x9c\x1c\xd6\xf9\x99\xc3\x04\x4f\x96\x1d\xef\x59\x44\x15\xb4\x27\x88\x41\x9d\x3f\xce\xaf\x07\x4b\xe6\x4c\x36\x7e\xf6\xbb\xe0\xf9\xe7\xf1\x23\x00\x00\xff\xff\xd9\x14\xce\x1d\x54\x04\x00\x00"

func editHtmlBytes() ([]byte, error) {
	return bindataRead(
		_editHtml,
		"edit.html",
	)
}

func editHtml() (*asset, error) {
	bytes, err := editHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "edit.html", size: 1108, mode: os.FileMode(436), modTime: time.Unix(1517207035, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _editJs = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x56\xdf\x6f\xdb\xba\x15\x7e\xcf\x5f\xe1\x70\x80\x41\x2e\x2c\x93\xf4\x76\x5b\x11\x4d\x28\xee\x6d\xbd\x15\x43\xef\x6d\x91\xf4\x61\x43\xd1\x87\x23\xf2\xe8\xc7\x4c\x91\x32\x49\x39\xf1\x6c\xfd\xef\x03\x25\xcb\x91\x5b\xa7\xd9\xee\x8b\x20\x52\x1f\xbf\x73\x78\x78\xbe\x4f\x5c\x83\x9b\x29\x5b\x27\x34\x6f\x8d\x0c\x95\x35\x34\x63\xdb\x4c\xac\xd2\xc3\x58\xb2\xad\xc3\xd0\x3a\x33\x53\x56\xb6\x35\x9a\x20\x56\x2d\xba\xcd\x1d\x6a\x94\xc1\x3a\x2a\x59\x97\x64\x62\x05\xff\xfb\x92\x9f\xb5\xde\xaf\x92\x3f\x5c\x24\x1d\x42\xc0\x85\xc6\x38\x1a\x57\x78\x3f\x59\xc3\x81\x2b\xb6\x95\xc2\x87\x8d\x46\xe1\x31\x7c\x72\xb6\x41\x17\x36\x14\xb8\xe2\x84\xb0\xae\x63\x54\xd9\x7a\xb7\x8b\xcf\x74\xdb\x31\x96\xc4\x2d\x3f\x94\x2e\x39\x3b\xda\x73\x9c\x9d\x64\xc3\xb6\xe3\xeb\x0c\xa8\x1a\x3e\x43\x1a\xca\xca\x27\xf1\x21\x1e\x4a\x97\xaa\xe1\x55\x59\x83\x7f\x33\x3e\xfd\xf2\x75\x18\xa3\x73\xd6\xed\x27\x94\xb0\x46\x5b\x50\x53\xe2\x21\x92\x12\x0e\x7d\x63\x8d\xc7\xcf\xf8\x10\x78\x96\x2a\xe1\x03\x84\xd6\x27\x30\x32\x8a\xdc\xba\x05\xc8\xf2\x31\x4f\x60\x5b\xa0\x92\x67\xac\x63\x5d\xcf\xdd\xc7\x9a\x92\xc3\x21\xfc\xc9\xd5\xfb\x0a\x03\x8d\x0c\x1d\x88\xc6\xd9\x60\xc3\xa6\x41\x61\xcd\x3b\x6b\x30\x9d\x82\xa7\xbb\x13\x4d\xeb\x4b\x0a\x2c\xd9\x33\xc4\x6f\x5d\x72\x4c\xb0\x38\x4e\x66\x64\x38\x24\xf4\x2c\xc5\x7d\x15\xca\xf7\x08\x0a\xa7\x2c\x5c\xee\x79\x1e\x4a\x17\x4f\xf8\x16\x57\x2d\xfa\x30\xe0\xfa\xcf\x4f\x13\x7a\x34\xea\x1f\x77\x1f\x7f\xfb\x3e\xa9\xc7\x50\x94\xbc\xb5\x26\xa0\x09\x2f\x3e\x6f\x1a\x24\xfc\x8c\x40\xd3\xe8\x4a\x42\xc4\x5f\xfe\xdb\x5b\x93\xc8\x12\x9c\xc7\x90\xb6\x21\x7f\x4d\x58\x32\xc9\xc6\x28\x1a\xf9\x85\x0f\xae\x32\x45\x95\x6f\x28\xb0\x67\xf2\xf9\x3e\x97\x03\xd5\xb7\xb5\x19\x4f\xab\xa3\x2c\xc9\xc4\x2d\xae\x52\x19\x15\xd0\xab\x62\x5a\xa1\x7d\xfb\x96\xa9\xc1\xfb\xd9\x3f\x7f\xfd\xf0\x3e\x84\x66\x5f\xa6\xa4\x14\xb6\xc1\x1e\xc4\xcf\xaf\x0e\xfc\x11\x28\x69\xd9\x2b\xaa\xc0\x90\x9e\xe8\x91\x31\x10\x25\x7f\x5f\x7c\x26\x1c\x7a\x6c\x63\xfd\x33\xe0\x4f\x1f\xef\x06\x74\xc7\xe8\x43\xe9\x76\xbb\xf8\x7c\x14\x5e\x61\x9f\xd3\xdd\xa0\xb4\x3a\xa6\xf5\x8b\x6d\x8d\xaa\x4c\xf1\x56\x57\x68\xc2\x2d\xca\x40\x59\xa2\x6c\x1d\x4d\x80\xd6\x9c\xd4\xe0\x8a\xca\xbc\x08\xb6\x21\xfc\x57\x08\xa5\xa8\xe1\x81\xfe\xe9\x8a\xdf\x57\x46\xd9\x7b\x51\x19\x83\xee\x3d\x56\x45\x19\x2e\x7f\x7a\x01\xa2\x1c\x5e\x5f\xb2\x0b\xd2\x3c\x10\xd6\x71\xf8\x3e\x2e\x45\xb1\x06\xdd\xe2\x6e\x47\x08\x13\xc1\x55\x35\x65\x09\x9c\xa7\x6e\x3e\xa7\x2e\x05\x3e\x46\x2f\x38\x09\x0e\x8c\xcf\xad\xab\x09\x27\x5e\x82\xc6\x7f\xd1\x2b\x46\x18\x87\x37\x8d\x90\x1a\xbc\xff\x50\xf9\x20\x40\x29\x4a\xd6\x95\x27\xec\x66\x3a\xed\xb0\xb6\x6b\xdc\x7f\xe1\x9a\x02\xcf\x87\xc0\x8c\x75\xfc\x3b\xbb\x80\x94\xe6\xa7\xf3\xf2\xf3\x39\xf5\x29\x70\x3d\x4d\x9c\x43\x64\x29\x8f\x0e\x2a\xb6\x21\xae\xd1\x84\x77\x98\x43\xab\x63\x25\x21\xd5\x76\x68\x73\xd1\x40\x28\x0d\xd4\x28\x7c\x9b\x0d\xbd\x4c\xaf\x99\xf0\x8d\xae\x02\x25\x97\x84\x7d\xb9\xfe\x9a\x0c\x27\x75\xb2\x40\x3a\x3a\x31\xeb\xb8\xfe\x46\xb7\xb1\xb3\x63\xcb\x50\x72\x09\x4d\x75\xd9\x3a\x7d\x49\x2e\xce\x24\x3b\x08\x93\x6e\x5b\xa7\x6f\x80\xb7\x95\xba\x59\x76\x6c\xef\x42\xf4\x98\x25\x06\xce\xd2\x5e\x67\x4d\x14\x62\xd4\x49\x95\xd3\x4c\xd8\x25\xdb\x4a\x6b\xbc\xd5\x28\xb4\x2d\x28\xb9\x45\x89\xd5\x1a\xd5\x6c\xf4\xd6\x9b\x19\xe1\xd9\xd0\x79\x26\xcd\x84\xb3\x6d\xc0\xb8\xd6\x0c\xac\x2a\x35\xa2\x75\x3a\xee\x25\x09\xd4\x88\x58\x82\x7e\x63\x89\x3a\x4f\xf7\x1b\x9d\xcf\x0f\xff\x23\x90\xa1\x5a\x8f\xff\xa3\xf3\x14\xe7\xf3\xb1\x1a\xa9\x62\xc9\x72\x0c\x20\xda\x4a\x75\x1d\x6a\x8f\xb3\x15\xcd\x06\xff\x8b\x7e\xcb\xd7\xdf\x9e\x6b\xf6\xff\x9d\xc0\xc9\xda\x8f\x19\x10\x92\x00\x1d\x0a\xc3\x62\xdd\x47\x41\xbe\x5b\x7c\x58\x7c\x5e\x10\x3e\x3d\x82\x6c\x38\x01\x7a\xaa\xe0\x07\x4d\x1e\x17\x5c\x0a\xbb\xdc\xed\x56\x54\x4e\xf6\xb3\x3a\xea\xb0\x42\x04\x7c\x08\x7b\x33\x8d\xe9\x14\x27\xfa\x5d\x57\x66\x49\x58\x72\x56\x7c\x2b\x91\xbc\x95\xf1\xc3\x50\x95\x5e\x65\x94\xf8\x06\x0c\x89\xd6\x77\x44\xbc\xb8\xbd\xfd\x78\x7b\x33\x23\x17\x90\x14\x02\x9a\x06\x8d\x7a\x5b\x56\x5a\xd1\xec\xd1\x1c\x4e\xcb\xf3\x9a\x45\xd5\x1f\x1b\xd8\x51\xff\xdc\x95\xf6\xbe\x32\xc5\x2c\x66\x79\x13\x65\x94\xc0\x9b\x91\xb2\x7d\x92\xf2\xe6\xc7\x90\x68\x0a\x51\xaa\xf9\x73\xfd\x94\xcf\xe7\xa3\xcc\x53\x60\x49\x6e\x1d\x1d\xca\x71\xc5\x65\x7a\x9f\x64\x7f\x95\x42\xa3\x29\x42\x99\x64\x17\x17\x63\x03\xcb\x2f\xd9\xd7\x64\xba\x09\xc5\x12\x35\x58\x5f\xbc\x58\xa4\xd0\x95\x95\x0f\xd6\x6d\x84\xc3\x46\x83\xc4\xbb\x10\xdb\x62\xdb\x71\xd3\x6a\xcd\xc9\x25\xaa\x2a\x5c\x92\x8b\x28\xdf\xba\x2f\xfc\x8a\x92\x7e\x03\x8c\x17\xe3\xf8\x0f\xb2\x6e\x08\xe3\xed\x61\x1c\x0b\x14\x8d\xab\x79\x44\xe8\x38\xc6\xc3\xb8\x75\x9a\x30\x9e\x1f\xc6\xbe\xb4\x2e\x0c\x93\x67\xf7\xe9\xcf\xce\xc1\x66\xfa\x63\xd4\x95\x44\x21\x41\x6b\x7a\xa8\x4e\x81\x61\x5f\x1a\xff\xcb\xe6\x6d\xec\x96\xdf\xa0\x46\x4a\x50\x96\x96\x30\xc6\x97\xdc\x71\x3f\xb9\xb8\xb2\xad\xa4\x2c\xd9\x7b\x3f\x28\xb5\x88\x6e\x17\x1b\x0c\x4d\xfc\xcb\x3b\xf4\xd5\x7f\x90\x70\xc9\xcf\xaf\x59\x52\x9f\x40\xf8\x36\xab\xab\x40\x78\xd9\x23\xf0\x04\x62\x89\x9b\xb6\x21\x1c\x9e\x04\x34\xe0\x03\xfe\x08\x20\x4b\x30\xc5\x01\x91\x3f\x1d\x43\x3d\x09\xd8\xc7\x78\x1a\x30\xc6\x18\x10\xcd\x29\x84\xae\xe4\x92\xf0\x75\x0f\xf8\x1d\x46\x14\xa2\xd6\xb2\x37\x87\x6e\xcd\x78\x74\x9c\x02\x8f\x8d\xfe\x69\x97\xc9\xf8\x99\x1c\x1b\x78\x62\x33\x19\x4b\x5e\x5e\x5d\xa5\xa9\x9c\xcf\xe9\x32\xde\x90\x47\x37\xe5\x07\x9b\x1d\xe7\x06\xd3\xe6\x28\x72\x2b\x5b\x4f\x19\x07\xca\x58\xc7\xd8\x0d\x7d\x9c\x5a\xa6\xfd\xa5\x20\xd7\xd6\x3a\xfa\xe2\xe5\xf5\xab\xbf\xbc\x7a\xfd\xd3\x9f\x5f\xbd\xfe\x63\x3f\xed\xc0\x28\x5b\x53\xc6\x44\xb0\x77\xc3\x3e\x23\x43\xbc\x19\xd3\xc2\xee\x76\xb4\xb0\xc3\xb5\xe5\xec\xbf\x01\x00\x00\xff\xff\xeb\xdd\x11\x82\x24\x0d\x00\x00"

func editJsBytes() ([]byte, error) {
	return bindataRead(
		_editJs,
		"edit.js",
	)
}

func editJs() (*asset, error) {
	bytes, err := editJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "edit.js", size: 3364, mode: os.FileMode(436), modTime: time.Unix(1523385802, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _indexJs = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\xdb\x6e\xe3\x36\x13\xbe\xf7\x53\xcc\x8f\x3f\x58\x52\x58\x85\x76\xb6\x77\x31\xdc\x62\xd7\x49\xd1\xc3\xb6\x29\x92\xf4\xa2\x28\x7a\xc1\x95\x46\x32\xd7\x14\x29\xf0\x10\xc7\xcd\xfa\x0d\xfa\x00\x7d\xbe\x3e\x49\xc1\x83\x2c\xc7\x4d\xd2\x02\xbd\x69\x2e\x62\x71\x38\x9c\xf9\xe6\xf4\x91\xb4\xf1\xaa\x72\x42\x2b\x5a\xc0\xc3\x64\x72\xc7\x0d\x9c\x34\xa6\x83\x05\x9c\x50\xd2\x68\xd3\x91\xa2\x9c\x00\x00\x9c\x54\x5d\x9f\xa4\xff\xaf\xba\x7e\x94\x4a\x3b\x48\xa5\xdd\x4b\xbd\x91\x59\xea\x8d\x1c\xa4\x95\xee\xb7\xdf\xe2\x16\x16\xa0\xf8\x9d\x68\xb9\xd3\x86\x79\x8b\xe6\x6d\x8b\xca\x31\xa1\x6a\xbc\xbf\x6a\x28\xf9\x8e\x57\x42\x39\x6d\x57\xa4\x80\xcf\x17\x30\x83\x2f\x80\xfc\xf1\xdb\xef\xa7\x4b\x02\xe7\x40\x96\xce\xc8\xd3\x25\x49\x16\x25\xb7\xee\x47\x23\xe7\x19\x37\xc2\x02\xf6\xe1\x28\xde\x61\x08\x09\xc0\xa0\xf3\x46\xc1\x09\xad\x75\xe5\xbb\xe0\xab\x32\xc8\x1d\x5e\x4a\x0c\xab\xa4\x59\xcc\x27\xbb\x6c\xc7\xa0\x15\xbf\x3e\xb2\x95\xec\xa4\xbd\xca\x85\xc8\x1a\xd3\xb1\x16\x1d\x9d\x15\xe1\xe7\x9d\xf6\xaa\x16\xaa\x5d\x4a\x81\xca\x5d\x63\xe5\x68\x31\x9f\x40\x52\xab\xac\xa5\xa4\xe3\xa6\x15\xea\xd4\xe9\x9e\x94\xb0\x11\xaa\xd6\x1b\x26\x94\x42\xf3\x15\x8a\x76\xe5\xa6\x9f\xc1\x69\xb4\xcd\x56\x69\xfd\xe6\x00\x4f\xc0\xf7\xa5\xd1\xdd\x21\x22\x6f\xc4\x08\xaa\xe7\xc6\x85\x2a\x78\x23\x98\xf5\x1f\xac\x33\x42\xb5\xf4\xac\x60\xb6\x97\xc2\x51\x32\x25\x11\x4d\xce\x43\xd4\xfe\xf9\xec\x97\xd1\x81\xd4\xbc\x7e\x3a\xdc\xe0\x3a\xd6\x2b\x21\xa0\x52\x57\x3c\xa8\xb0\x9e\xbb\x55\xcc\x5b\x0c\x93\xf1\x8f\xfc\x9e\x3e\xc4\x9a\x78\x23\xcf\x81\x4c\x79\x2f\xa6\xde\xc8\x29\x81\xd7\xf1\x78\x2a\x58\xcd\x1d\xbf\xdd\xf6\x78\x0e\xe4\xa3\xd5\x8a\x4c\x00\x76\x05\xe3\x72\xc3\xb7\x76\xec\xc4\xa0\x95\x30\x00\x88\x06\xe8\xff\x82\x80\xe9\xf5\x20\x03\xb0\x2b\xbd\xb9\x34\x46\x9b\xa8\xcb\x30\x7c\x46\x28\xe1\x2f\xc5\x99\x56\xbb\x49\xfc\x89\xa5\xd3\xde\x85\x60\xe2\x89\xb8\x28\xf3\x81\x08\x1a\x16\x59\xe3\xd5\xab\xf4\xc1\x82\xf0\xd3\x27\x20\x64\xbe\x6f\x6a\x76\xc7\x25\xf5\x46\x16\xac\xd1\x95\xb7\x34\xfb\xf4\x46\x5e\x88\x7a\xb9\xe2\xaa\xc5\x24\xdb\x85\xfa\xa5\xec\x06\xac\xef\x85\x5a\x3f\xdd\x9c\x31\xff\x71\x73\x9f\x5b\x6d\x44\x2b\x14\xbc\x06\xb2\xcf\xde\x3c\x84\x11\x26\x90\x39\xbc\x77\x94\x90\x22\xfa\x65\x06\x3b\x7d\x87\x4b\xc9\x43\x8f\x35\xbe\x5a\x0f\x1b\xbc\xae\xb3\x54\x0a\xb5\x0e\xf5\xcf\xbe\x78\x9c\xcb\x67\x26\x81\x70\x52\x0c\x06\x9c\x33\x94\xac\x0c\x36\xa4\x0c\x00\xb3\x38\xba\x1f\x97\xbc\xef\x51\xd5\xb7\x9a\x06\x6c\xa3\x93\xd5\x8b\x4e\x6c\xcf\xd5\xe8\x67\x0f\x74\xa5\x1c\x39\xf4\x92\xe9\xe2\x79\x4f\x31\x1f\x71\xba\x9c\xe1\xca\x46\xb2\x2a\x81\xd8\x8a\x4b\xfc\x89\x9e\x15\x39\xea\x16\xdd\x0d\x4a\xcc\xad\xcd\x2c\xba\x77\xdc\xe2\x5b\x55\x5f\xde\xbb\x80\x87\xe7\x41\x2e\x61\x56\xc2\xb8\x38\x3b\x98\xc0\x7d\xbb\x1d\xd6\xb0\x43\x6b\x79\x9b\xcb\xf8\x77\xb5\x49\x55\x38\x0e\x39\x55\x2c\x05\x83\x43\x62\xb2\x99\xcb\xeb\xeb\xab\xeb\x73\x08\x1d\x30\x78\xfa\x57\x99\x18\x62\x59\x89\x1a\x2f\x0c\xdf\xa0\xf9\xeb\xc8\xbf\x6c\x67\xf6\xc8\xce\x61\xcf\x3f\x4d\x1e\xf9\x12\x18\xc6\xa6\x60\xce\x88\x2e\x8d\x47\x98\xea\xb8\xbd\x18\x38\x7c\x98\xed\x71\x78\xe3\xe8\xe6\xdd\x48\x6e\x32\xc6\x3a\xe2\x7f\x64\x6a\x38\x1f\x2e\x24\xd6\xf0\x1a\xbf\x56\xf4\xcd\x6c\x96\x86\x11\x50\x5a\x3c\x56\xb8\xf2\x6e\xd4\x88\x61\x45\xba\xd6\x8a\x12\xeb\x3f\x74\xc2\x91\x72\x8c\x2a\x97\x19\x59\x6f\xf0\x0e\x95\xbb\xc0\x86\x7b\x99\x69\xfe\x9f\x31\xe5\xc0\x36\xcf\xa6\xe5\x98\x49\x5d\x22\xca\x1f\xae\x6e\x6e\xf3\x7d\x17\x8e\xbe\x4c\xae\x70\x0e\xdf\xdc\x5c\x7d\xcf\xd2\x1d\x20\x9a\x2d\x7d\xc8\xa7\xc2\xff\x5d\xf1\x98\x86\xe1\xbf\xc1\xc3\xf3\xd1\x43\x5c\x8f\xf6\x8f\x8b\xfd\x82\xd9\x03\x0a\x1f\x99\x7b\x64\xf8\x5c\x9f\xb4\x1f\x17\x07\xd4\x7e\xd4\x43\xc1\xaf\x75\xda\x6c\x99\xc1\x5e\xf2\x0a\x6f\x1c\x77\x48\x1f\x76\x25\x28\x2f\x65\x09\x64\x8a\xb5\x70\xfb\xf4\xef\xa1\x0d\x54\x4f\x0f\xa4\xbb\xe1\x36\x08\x15\x8e\x55\x0f\x1d\xb6\xc6\x6d\xad\x37\x8a\x94\x8f\xe6\x28\x4f\x78\x50\xe8\xb9\x75\xf8\xfc\x76\x15\x05\xc7\xfb\xc1\x43\x68\xef\xa8\x21\x45\xb5\x7e\xa2\x85\xf7\x8d\x47\xc8\xf8\x46\x49\x0d\x9f\x72\x7c\x7c\x99\x45\xe0\xf9\xc9\xc2\xeb\xfa\x32\xb4\xff\x7b\x61\x1d\x2a\x34\x94\xa4\xc7\x12\x29\xf3\xab\xa9\x98\x4f\xd2\x47\x38\x79\x6c\x29\xbc\x33\x62\xa3\xef\x8a\xf0\xf3\x67\x00\x00\x00\xff\xff\x02\x84\xe0\x0d\x7b\x0a\x00\x00"

func indexJsBytes() ([]byte, error) {
	return bindataRead(
		_indexJs,
		"index.js",
	)
}

func indexJs() (*asset, error) {
	bytes, err := indexJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.js", size: 2683, mode: os.FileMode(436), modTime: time.Unix(1517201890, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _linksCss = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8f\x41\x6e\xe3\x30\x0c\x45\xf7\x73\x0a\x03\x59\x64\x33\x0a\x94\x38\x28\x5a\xfa\x16\xbd\x01\x63\x49\x36\x11\x46\x14\x24\xba\xb6\x2b\xf4\xee\x45\x90\xb8\x40\x16\x5c\x10\x7c\x7c\xf8\xff\x22\x6e\xad\x17\xec\xaf\x43\x96\x29\x3a\xd8\x85\x10\xba\x20\x51\x4d\xc0\x1b\xf1\x0a\xfb\x4f\x64\x3f\xe3\xba\xff\xdf\x14\x8c\xc5\x14\x9f\xe9\x49\x14\xfa\xf6\x70\x3e\xa5\xe5\xb1\xce\x9e\x86\x51\xa1\xb5\xf6\xe7\xc0\x14\xaf\xa5\xce\xe4\x74\x84\x77\x6b\xd3\xd2\xdd\x30\x0f\x14\xc1\x36\x38\xa9\x3c\x81\x06\x6b\x2f\x2c\x19\x76\xf6\x23\x74\xea\x17\x35\xce\xf7\x92\x51\x49\x22\x44\x89\xfe\x0f\x84\x51\xbe\x7c\xae\x92\xb0\x27\x5d\xc1\x1e\xde\xb6\xd3\x21\x4c\xcc\x66\xca\xbc\xb9\x9c\x73\x0f\x57\x19\xd1\xc9\x0c\xc7\xb4\x34\xf7\xb1\xcd\xbd\xdc\xf6\x36\x1e\x37\xbe\x6d\xdb\x67\x3a\x73\x11\x55\xb9\xc1\xd9\xa6\x65\xe3\x26\xae\x09\x9d\xa3\x38\x80\xed\x98\x8a\x9a\xa2\x2b\x7b\xa3\x6b\xf2\x2f\x11\x27\x6e\x98\xea\xab\xe8\x74\x17\xfd\xfb\x0d\x00\x00\xff\xff\xb8\xc8\x00\x8a\x64\x01\x00\x00"

func linksCssBytes() ([]byte, error) {
	return bindataRead(
		_linksCss,
		"links.css",
	)
}

func linksCss() (*asset, error) {
	bytes, err := linksCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "links.css", size: 356, mode: os.FileMode(436), modTime: time.Unix(1517201890, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _linksHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x52\x4d\x8f\x94\x40\x10\xbd\xef\xaf\x28\x3b\x7b\x5c\x28\x36\x7a\x30\xd8\x8d\x31\xab\xf1\xb2\x89\x66\x33\x1e\x3c\xf6\x40\x01\x1d\x1a\x7a\xa4\x0b\x94\x10\xfe\xbb\x69\x60\xe2\xcc\x98\x98\x58\x97\x4e\xd5\xab\x8f\xf7\x5e\x5a\xbe\xfa\xf8\xe5\xe9\xf0\xfd\xeb\x27\xa8\xb9\xb5\xd9\x9d\x3c\x3f\xa4\x8b\xec\x0e\x00\x40\xb2\x61\x4b\xd9\x67\x07\x69\x0a\x1f\x72\x36\x23\xc1\xb3\xe9\x1a\x2f\x71\x43\xb6\xae\x96\x58\x43\xcd\x7c\x8a\xe8\xc7\x60\x46\x25\x9e\x5c\xc7\xd4\x71\x74\x98\x4e\x24\x20\xdf\x32\x25\x98\x7e\x31\x86\x23\xef\x20\xaf\x75\xef\x89\xd5\xc0\x65\xf4\x56\xe0\xbe\xc8\x9a\xae\x81\xba\xa7\x52\x09\xf4\x18\x32\x1f\xe7\xde\x8b\x15\x0d\xd1\x93\x55\xc2\xf3\x64\xc9\xd7\x44\x2c\xfe\x9e\x0b\x34\x7c\x8a\x58\xba\x8e\x7d\x5c\x39\x57\x59\xd2\x27\xe3\xe3\xdc\xb5\x98\x7b\xff\xbe\xd4\xad\xb1\x93\x7a\xd1\x96\x7e\xea\x29\x7d\x93\x24\x0f\xaf\x93\xe4\x5f\x27\x24\x6e\x8e\xc8\xa3\x2b\xa6\xfd\x62\x61\x46\xc8\xad\xf6\x5e\x89\x95\xe6\xce\x64\xc5\xea\xc7\x6c\xf7\xca\x6e\x5e\xd5\x8f\x17\xe8\x60\xff\x24\x21\xe6\x19\x7a\xdd\x55\x04\xf7\x0d\x4d\x0f\x70\xdf\xbb\x81\x09\x52\x05\x31\x2c\xcb\x55\xa7\xb4\xe6\x7a\x74\x2d\xea\x5d\xf8\x3c\xef\xb3\xf1\xb7\x97\x67\x58\x16\x91\x55\x0e\x43\xb1\xa1\x09\x96\x45\xa2\xce\xe4\xb1\x07\xfc\x9f\x15\x67\x89\xe5\x60\x6d\x34\xf4\x56\x64\xb7\x2d\x61\xed\x35\x49\xbc\x65\x39\xcf\x40\x5d\x71\x29\x46\xe2\xd9\x04\x89\x85\x19\x83\xc3\x9b\xb5\x12\xb7\x2f\xf8\x3b\x00\x00\xff\xff\x59\x5f\xf5\xba\x9a\x02\x00\x00"

func linksHtmlBytes() ([]byte, error) {
	return bindataRead(
		_linksHtml,
		"links.html",
	)
}

func linksHtml() (*asset, error) {
	bytes, err := linksHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "links.html", size: 666, mode: os.FileMode(436), modTime: time.Unix(1517201890, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"close.svg": closeSvg,
	"edit.css": editCss,
	"edit.html": editHtml,
	"edit.js": editJs,
	"index.js": indexJs,
	"links.css": linksCss,
	"links.html": linksHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"close.svg": &bintree{closeSvg, map[string]*bintree{}},
	"edit.css": &bintree{editCss, map[string]*bintree{}},
	"edit.html": &bintree{editHtml, map[string]*bintree{}},
	"edit.js": &bintree{editJs, map[string]*bintree{}},
	"index.js": &bintree{indexJs, map[string]*bintree{}},
	"links.css": &bintree{linksCss, map[string]*bintree{}},
	"links.html": &bintree{linksHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

