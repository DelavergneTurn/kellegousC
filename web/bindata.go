// Code generated by go-bindata.
// sources:
// pub/close.svg
// pub/index.css
// pub/index.html
// pub/index.js
// pub/links.html
// pub/links.html~
// DO NOT EDIT!

package web

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _closeSvg = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\x8e\xc1\x8a\x84\x30\x0c\x86\x5f\x25\xe4\xbe\x69\x9b\x62\xcd\x2e\xd6\xc3\x9e\xdd\x87\x58\x50\x5a\xc1\x19\x65\x2c\x56\xe6\xe9\x87\x56\x2f\x3f\xe1\xfb\xbf\x84\x74\xfb\x11\xe0\x7c\x2c\xcf\xdd\x63\x4c\x69\xfb\x51\x2a\xe7\x4c\xd9\xd2\xfa\x0a\x8a\xb5\xd6\x6a\x3f\x02\x42\x9e\xc7\x14\x3d\x5a\x87\x10\xa7\x39\xc4\x74\xcd\xc7\x3c\xe5\xdf\xf5\xf4\xa8\x41\x83\x75\x60\x1d\xf6\xdd\xf6\x9f\x22\x8c\x1e\xff\x58\xa8\x81\x6f\x72\x3c\xb0\x23\x2b\xd0\x52\x03\x46\xc0\x34\x24\x52\x79\x25\xed\x2d\xdd\xdc\x5c\x5e\xdd\x58\x98\x0c\x43\x89\xc1\x08\xb0\x26\xc3\x8b\x94\x4b\x35\x0a\xff\xaa\x65\x6d\xc0\xc8\x1b\x55\xdf\x95\x87\xfb\x4f\x00\x00\x00\xff\xff\xe5\x79\xbd\x91\xd8\x00\x00\x00"

func closeSvgBytes() ([]byte, error) {
	return bindataRead(
		_closeSvg,
		"close.svg",
	)
}

func closeSvg() (*asset, error) {
	bytes, err := closeSvgBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "close.svg", size: 216, mode: os.FileMode(420), modTime: time.Unix(1500593241, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _indexCss = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\x5d\x6f\xe3\x20\x10\x7c\xcf\xaf\x58\x35\x0f\x6d\xa5\x92\xd2\xa4\x8d\x1a\x2a\xdd\x8f\xb8\xb7\x7b\xc4\x66\xed\xa0\x62\x16\x01\x6e\x92\x9e\xee\xbf\x9f\x0c\x76\x48\xd2\x8b\xd4\x53\x3e\x64\x60\x18\xd8\x99\x59\x57\xa4\x0e\xf0\x7b\x06\x50\xc9\xfa\xbd\xf5\xd4\x5b\x25\x60\xde\x34\xcd\xdb\x0c\xa0\x21\x1b\x59\x23\x3b\x6d\x0e\x02\x6e\x7f\x4a\x83\x3b\x79\xb8\x7d\x80\x20\x6d\x60\x01\xbd\x2e\xa8\xa0\x3f\x51\xc0\xf3\xd2\xed\x8f\x53\x3b\xd4\xed\x36\x0a\x58\x71\xfe\x36\xfb\x33\x9b\x35\xe4\xbb\x74\x54\xc4\x7d\x64\xd2\xe8\xd6\x0a\xa8\xd1\x46\xf4\x69\x7d\x5e\x49\x9f\xd6\x77\x5a\xc5\xad\x80\xf5\xcb\xc8\xd6\x49\xdf\x6a\x2b\x80\x83\xec\x23\x0d\x33\x8e\x82\x8e\x9a\xac\x00\x8f\x46\x46\xfd\x81\x99\xa1\xf7\x26\x31\xfc\xf7\xc5\x57\x57\x2f\x5e\xae\xc3\x79\xc6\x38\xa9\x94\xb6\xad\x80\xe5\x4b\x9e\xa8\xc9\x90\x17\x30\xdf\x6c\x36\xc3\xb0\x22\xaf\xd0\x33\x2f\x95\xee\x83\x80\xe7\x0c\xca\xb3\x02\x9e\xdc\x1e\x02\x19\xad\x60\x5e\xd7\xf5\xb0\x42\x7d\x34\xda\xa2\x00\x4b\x16\x33\x74\xcf\xc2\x56\x2a\xda\x0d\x35\x2f\xdd\x1e\xd6\x6e\x0f\xbe\xad\xe4\x1d\x7f\x80\xf1\xbb\x58\xde\x1f\x6b\x16\x0d\xd5\x7d\xc8\x36\x7e\x3d\x86\x6f\x9a\x82\x14\x6c\x87\xd5\xbb\x8e\x4c\x5b\xd7\x47\xe6\x8c\xac\x71\x4b\x46\x61\x96\xfe\x58\x8b\x52\xea\x74\x53\x47\x9f\xdf\xc0\xd6\x9d\x4b\x2b\x5f\x14\x1a\x25\x7c\x59\xf3\x6b\x8e\x9e\x66\xc2\x60\x13\x2f\xfc\x59\x3e\xe5\x8d\xd1\x4b\x3b\x59\x9f\x9e\x53\xa8\x96\x9c\x77\x01\x50\x06\x64\xda\x32\xea\xe3\x11\x3a\x2c\x0b\x08\xb5\x34\xf8\xeb\x8e\xdf\x9f\xcd\x33\xf2\x3a\xdd\x22\x92\x3b\xe6\xf0\x68\x5f\x45\x31\x52\xc7\x86\xbb\xfc\xdb\xca\x09\xe1\x87\xb0\x7c\xd7\xed\x51\xa5\x85\xd1\xf6\xfd\xa2\xed\xd8\x24\x67\xb3\x1e\x3e\x05\xdb\xf4\xf5\x75\x2c\xe2\x97\x04\x4e\x4e\xfc\x00\xf9\x00\xe9\xa4\x00\x32\x11\x4c\xb0\x94\x88\x51\x73\x85\x35\x79\x99\x15\xcd\x01\x2c\xfb\x17\x5b\x1b\x8f\x14\x8b\xa6\x37\x86\x4d\x1d\x76\xe6\xfd\x48\x35\x65\x76\x28\x7a\xf8\xf1\xf1\x45\x72\x4e\x98\x1b\xd4\x90\x8c\x02\x92\x76\x23\xc0\xe4\x00\x97\xd6\x96\x55\x20\xd3\xc7\x54\x60\x24\x27\x20\x75\xa3\xcf\xbd\xc9\xb3\xca\x83\x03\xe3\x60\x6a\xd3\xc9\x81\x22\x96\xee\x64\x8b\x02\x7a\x6f\xee\x6e\x1e\xc3\x63\x6d\x28\xe0\x22\x7c\xb4\x37\xf7\x17\xc0\x72\x76\x8e\xc3\x69\x2a\x0a\xca\xa3\xc3\xe1\xf2\x96\xc6\xc7\x8b\xf5\xf1\x55\xf8\xea\xf6\xe9\x2f\xf9\xd3\xfb\x30\xc8\xe5\x48\x4f\x84\xe4\x64\xad\xe3\x41\x00\x5f\xac\x86\xb1\xd2\xc1\x19\x79\x38\x33\xc1\x04\xb1\xa5\x0f\xf4\xc5\xc6\x3c\x4e\x42\x9d\x10\xe4\xb0\x8c\x98\x93\x37\xe8\x2b\xbf\xd2\x6f\x05\xbd\x7d\x3a\xb3\x73\xb5\x5a\x15\x3c\x9b\xf4\x7d\x4e\x34\x65\x53\x6f\xce\xdb\x3c\xe9\x6f\x74\x88\x2c\xc4\x83\x41\x16\x0f\x0e\x4f\x0a\x29\xbb\x8c\x4e\x1b\x2f\xe8\x97\x23\xfd\xdf\x00\x00\x00\xff\xff\x92\xfb\x0d\x84\x8c\x06\x00\x00"

func indexCssBytes() ([]byte, error) {
	return bindataRead(
		_indexCss,
		"index.css",
	)
}

func indexCss() (*asset, error) {
	bytes, err := indexCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.css", size: 1676, mode: os.FileMode(420), modTime: time.Unix(1500670751, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _indexHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x92\xcf\x72\xd3\x30\x10\xc6\xef\x79\x8a\x45\x67\xe2\x4d\x08\x07\x52\x24\x33\x43\x92\x01\x66\x0a\x74\x4a\x18\xe0\xa8\xd8\xeb\x58\x41\xb6\x5c\x69\x9d\xc4\x6f\xcf\xc8\x76\xdb\x50\x7a\xc2\xa7\xfd\xe3\xef\xf7\xed\xee\x48\xbe\x58\x7f\x5d\x6d\x7f\xdd\x6c\xa0\xe4\xca\xc2\xcd\xf7\xf7\xd7\x9f\x56\x20\xa6\x88\x3f\x16\x2b\xc4\xf5\x76\x0d\x3f\x3f\x6e\x3f\x5f\xc3\x3c\x99\xc1\x37\xf6\x26\x63\xc4\xcd\x17\x01\xa2\x64\x6e\xae\x10\x4f\xa7\x53\x72\x5a\x24\xce\xef\x71\x7b\x8b\xe7\x48\x99\x47\xd9\x18\x4e\x43\xaf\x49\x72\xce\x45\x3a\x91\xbd\xc9\xb9\xb2\x75\x50\xcf\x00\xe6\xcb\xe5\x72\xd0\x89\x74\x02\x20\x4b\xd2\x79\x0c\x00\x24\x1b\xb6\x94\x7e\x70\x12\x87\x68\xa8\x56\xc4\x1a\x22\x67\x4a\x77\xad\x39\x2a\xb1\x72\x35\x53\xcd\xd3\x6d\xd7\x90\x80\x6c\xc8\x94\x60\x3a\x33\x46\xee\x5b\xc8\x4a\xed\x03\xb1\x6a\xb9\x98\xbe\x11\x38\x82\xac\xa9\x7f\x43\xe9\xa9\x50\x02\x03\x9a\x3a\xa7\x73\x92\x85\x20\xfa\x6e\xfc\x3c\x59\x25\x02\x77\x96\x42\x49\xc4\x8f\x0d\xee\x1a\x1a\x0d\xa2\xe0\x5f\xde\xb8\x66\xe1\x6a\x0e\xc9\xde\xb9\xbd\x25\xdd\x98\x90\x64\xae\x8a\x8a\x77\x85\xae\x8c\xed\xd4\xad\xb6\x74\xd2\xdd\xd5\xeb\xd9\xec\xe5\x62\x36\xfb\x3f\x67\x89\xf7\x27\x93\x3b\x97\x77\xe3\x30\x85\xf3\x15\xe8\x96\x5d\xe6\xaa\xc6\x12\x93\x12\xae\x28\xc6\x51\x01\x64\x6e\x8e\x60\x72\x25\x76\xda\x3f\x14\x2f\xca\x99\x0d\x22\x95\x98\x9b\xe3\x45\xd3\xd4\x4d\xcb\x17\x23\x88\xfe\xd7\xd6\x5b\x01\x8d\xd5\x19\x95\xce\xe6\xe4\x95\xd8\xd4\x4c\x1e\xb8\x24\x68\xbd\x05\x76\x10\x4a\xe7\x99\xea\x48\xec\x19\x0f\x53\x5c\x1a\x3c\x7a\x57\xcd\x5f\xde\x12\xe3\x32\xe9\x64\x48\x42\xe6\x4d\xc3\x10\x7c\xa6\x04\xa2\x3e\xe8\xf3\xd3\x03\xc7\x1a\x5a\xb3\x0b\x78\xb8\x6b\xc9\x77\xf8\x2a\x99\x27\x8b\x31\x49\x2a\x53\x27\x87\x7e\xb9\x81\x94\x3e\x83\xbd\x7f\x0d\x4f\xff\x93\x38\x5c\x58\xf6\xef\x2a\x9d\xfc\x09\x00\x00\xff\xff\xfc\x61\x6a\x79\x49\x03\x00\x00"

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 841, mode: os.FileMode(420), modTime: time.Unix(1500593241, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _indexJs = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\xdb\x6e\xe3\x36\x13\xbe\xf7\x53\xcc\x8f\x3f\x58\x52\x58\x85\x76\xb6\x77\x31\xdc\x62\xd7\x49\xd1\xc3\xb6\x29\x92\xf4\xa2\x28\x7a\xc1\x95\x46\x32\xd7\x14\x29\xf0\x10\xc7\xcd\xfa\x0d\xfa\x00\x7d\xbe\x3e\x49\xc1\x83\x2c\xc7\x4d\xd2\x02\xbd\x69\x2e\x62\x71\x38\x9c\xf9\xe6\xf4\x91\xb4\xf1\xaa\x72\x42\x2b\x5a\xc0\xc3\x64\x72\xc7\x0d\x9c\x34\xa6\x83\x05\x9c\x50\xd2\x68\xd3\x91\xa2\x9c\x00\x00\x9c\x54\x5d\x9f\xa4\xff\xaf\xba\x7e\x94\x4a\x3b\x48\xa5\xdd\x4b\xbd\x91\x59\xea\x8d\x1c\xa4\x95\xee\xb7\xdf\xe2\x16\x16\xa0\xf8\x9d\x68\xb9\xd3\x86\x79\x8b\xe6\x6d\x8b\xca\x31\xa1\x6a\xbc\xbf\x6a\x28\xf9\x8e\x57\x42\x39\x6d\x57\xa4\x80\xcf\x17\x30\x83\x2f\x80\xfc\xf1\xdb\xef\xa7\x4b\x02\xe7\x40\x96\xce\xc8\xd3\x25\x49\x16\x25\xb7\xee\x47\x23\xe7\x19\x37\xc2\x02\xf6\xe1\x28\xde\x61\x08\x09\xc0\xa0\xf3\x46\xc1\x09\xad\x75\xe5\xbb\xe0\xab\x32\xc8\x1d\x5e\x4a\x0c\xab\xa4\x59\xcc\x27\xbb\x6c\xc7\xa0\x15\xbf\x3e\xb2\x95\xec\xa4\xbd\xca\x85\xc8\x1a\xd3\xb1\x16\x1d\x9d\x15\xe1\xe7\x9d\xf6\xaa\x16\xaa\x5d\x4a\x81\xca\x5d\x63\xe5\x68\x31\x9f\x40\x52\xab\xac\xa5\xa4\xe3\xa6\x15\xea\xd4\xe9\x9e\x94\xb0\x11\xaa\xd6\x1b\x26\x94\x42\xf3\x15\x8a\x76\xe5\xa6\x9f\xc1\x69\xb4\xcd\x56\x69\xfd\xe6\x00\x4f\xc0\xf7\xa5\xd1\xdd\x21\x22\x6f\xc4\x08\xaa\xe7\xc6\x85\x2a\x78\x23\x98\xf5\x1f\xac\x33\x42\xb5\xf4\xac\x60\xb6\x97\xc2\x51\x32\x25\x11\x4d\xce\x43\xd4\xfe\xf9\xec\x97\xd1\x81\xd4\xbc\x7e\x3a\xdc\xe0\x3a\xd6\x2b\x21\xa0\x52\x57\x3c\xa8\xb0\x9e\xbb\x55\xcc\x5b\x0c\x93\xf1\x8f\xfc\x9e\x3e\xc4\x9a\x78\x23\xcf\x81\x4c\x79\x2f\xa6\xde\xc8\x29\x81\xd7\xf1\x78\x2a\x58\xcd\x1d\xbf\xdd\xf6\x78\x0e\xe4\xa3\xd5\x8a\x4c\x00\x76\x05\xe3\x72\xc3\xb7\x76\xec\xc4\xa0\x95\x30\x00\x88\x06\xe8\xff\x82\x80\xe9\xf5\x20\x03\xb0\x2b\xbd\xb9\x34\x46\x9b\xa8\xcb\x30\x7c\x46\x28\xe1\x2f\xc5\x99\x56\xbb\x49\xfc\x89\xa5\xd3\xde\x85\x60\xe2\x89\xb8\x28\xf3\x81\x08\x1a\x16\x59\xe3\xd5\xab\xf4\xc1\x82\xf0\xd3\x27\x20\x64\xbe\x6f\x6a\x76\xc7\x25\xf5\x46\x16\xac\xd1\x95\xb7\x34\xfb\xf4\x46\x5e\x88\x7a\xb9\xe2\xaa\xc5\x24\xdb\x85\xfa\xa5\xec\x06\xac\xef\x85\x5a\x3f\xdd\x9c\x31\xff\x71\x73\x9f\x5b\x6d\x44\x2b\x14\xbc\x06\xb2\xcf\xde\x3c\x84\x11\x26\x90\x39\xbc\x77\x94\x90\x22\xfa\x65\x06\x3b\x7d\x87\x4b\xc9\x43\x8f\x35\xbe\x5a\x0f\x1b\xbc\xae\xb3\x54\x0a\xb5\x0e\xf5\xcf\xbe\x78\x9c\xcb\x67\x26\x81\x70\x52\x0c\x06\x9c\x33\x94\xac\x0c\x36\xa4\x0c\x00\xb3\x38\xba\x1f\x97\xbc\xef\x51\xd5\xb7\x9a\x06\x6c\xa3\x93\xd5\x8b\x4e\x6c\xcf\xd5\xe8\x67\x0f\x74\xa5\x1c\x39\xf4\x92\xe9\xe2\x79\x4f\x31\x1f\x71\xba\x9c\xe1\xca\x46\xb2\x2a\x81\xd8\x8a\x4b\xfc\x89\x9e\x15\x39\xea\x16\xdd\x0d\x4a\xcc\xad\xcd\x2c\xba\x77\xdc\xe2\x5b\x55\x5f\xde\xbb\x80\x87\xe7\x41\x2e\x61\x56\xc2\xb8\x38\x3b\x98\xc0\x7d\xbb\x1d\xd6\xb0\x43\x6b\x79\x9b\xcb\xf8\x77\xb5\x49\x55\x38\x0e\x39\x55\x2c\x05\x83\x43\x62\xb2\x99\xcb\xeb\xeb\xab\xeb\x73\x08\x1d\x30\x78\xfa\x57\x99\x18\x62\x59\x89\x1a\x2f\x0c\xdf\xa0\xf9\xeb\xc8\xbf\x6c\x67\xf6\xc8\xce\x61\xcf\x3f\x4d\x1e\xf9\x12\x18\xc6\xa6\x60\xce\x88\x2e\x8d\x47\x98\xea\xb8\xbd\x18\x38\x7c\x98\xed\x71\x78\xe3\xe8\xe6\xdd\x48\x6e\x32\xc6\x3a\xe2\x7f\x64\x6a\x38\x1f\x2e\x24\xd6\xf0\x1a\xbf\x56\xf4\xcd\x6c\x96\x86\x11\x50\x5a\x3c\x56\xb8\xf2\x6e\xd4\x88\x61\x45\xba\xd6\x8a\x12\xeb\x3f\x74\xc2\x91\x72\x8c\x2a\x97\x19\x59\x6f\xf0\x0e\x95\xbb\xc0\x86\x7b\x99\x69\xfe\x9f\x31\xe5\xc0\x36\xcf\xa6\xe5\x98\x49\x5d\x22\xca\x1f\xae\x6e\x6e\xf3\x7d\x17\x8e\xbe\x4c\xae\x70\x0e\xdf\xdc\x5c\x7d\xcf\xd2\x1d\x20\x9a\x2d\x7d\xc8\xa7\xc2\xff\x5d\xf1\x98\x86\xe1\xbf\xc1\xc3\xf3\xd1\x43\x5c\x8f\xf6\x8f\x8b\xfd\x82\xd9\x03\x0a\x1f\x99\x7b\x64\xf8\x5c\x9f\xb4\x1f\x17\x07\xd4\x7e\xd4\x43\xc1\xaf\x75\xda\x6c\x99\xc1\x5e\xf2\x0a\x6f\x1c\x77\x48\x1f\x76\x25\x28\x2f\x65\x09\x64\x8a\xb5\x70\xfb\xf4\xef\xa1\x0d\x54\x4f\x0f\xa4\xbb\xe1\x36\x08\x15\x8e\x55\x0f\x1d\xb6\xc6\x6d\xad\x37\x8a\x94\x8f\xe6\x28\x4f\x78\x50\xe8\xb9\x75\xf8\xfc\x76\x15\x05\xc7\xfb\xc1\x43\x68\xef\xa8\x21\x45\xb5\x7e\xa2\x85\xf7\x8d\x47\xc8\xf8\x46\x49\x0d\x9f\x72\x7c\x7c\x99\x45\xe0\xf9\xc9\xc2\xeb\xfa\x32\xb4\xff\x7b\x61\x1d\x2a\x34\x94\xa4\xc7\x12\x29\xf3\xab\xa9\x98\x4f\xd2\x47\x38\x79\x6c\x29\xbc\x33\x62\xa3\xef\x8a\xf0\xf3\x67\x00\x00\x00\xff\xff\x02\x84\xe0\x0d\x7b\x0a\x00\x00"

func indexJsBytes() ([]byte, error) {
	return bindataRead(
		_indexJs,
		"index.js",
	)
}

func indexJs() (*asset, error) {
	bytes, err := indexJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.js", size: 2683, mode: os.FileMode(420), modTime: time.Unix(1500593241, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _linksHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x52\x5d\x6f\xd3\x3c\x14\xbe\xef\xaf\x38\xaf\xb5\xcb\xd5\xa7\x79\xcb\x05\x2b\x8e\x11\x74\x13\x20\x15\x98\x46\x27\xe0\xd2\x4b\x4e\x1b\xaf\x4e\xd2\xd9\x4e\xdb\x28\xca\x7f\x47\x6e\x92\x15\x95\x5d\x20\x7c\x65\xfb\x9c\xe7\xe3\x3c\xb6\xf8\xef\xfa\xeb\x7c\xf9\xf3\xf6\x06\x32\x9f\x1b\xb8\xbd\x7f\xbf\xf8\x34\x07\x36\x46\xfc\x3e\x9d\x23\x5e\x2f\xaf\xe1\xc7\xc7\xe5\xe7\x05\x44\x7c\x02\xdf\xbc\xd5\x89\x47\xbc\xf9\xc2\x80\x65\xde\x6f\x67\x88\xfb\xfd\x9e\xef\xa7\xbc\xb4\x6b\x5c\xde\xe1\x21\xb0\x44\x01\xd6\x6f\xc7\xee\x88\xe1\xa9\x4f\x99\x1c\x89\xa3\xc8\x21\x37\x85\x8b\x5f\x20\x88\xae\xae\xae\x3a\x1c\x93\x23\x00\x91\x91\x4a\xc3\x06\x40\x78\xed\x0d\xc9\x0f\x25\xcc\x66\xf0\x2e\xf1\x7a\x47\xb0\xd0\xc5\xc6\x09\xec\x2a\x5d\x57\x4e\x5e\x41\xe0\x1d\xd3\x53\xa5\x77\x31\x9b\x97\x85\xa7\xc2\x8f\x97\xf5\x96\x18\x24\xdd\x29\x66\x9e\x0e\x1e\x83\xce\x1b\x48\x32\x65\x1d\xf9\xb8\xf2\xab\xf1\x6b\x86\x3d\x91\xd1\xc5\x06\x32\x4b\xab\x98\xa1\x43\x5d\xa4\x74\xe0\x89\x73\xec\x58\x0d\xcb\x92\x89\x99\xf3\xb5\x21\x97\x11\xf9\x53\xc1\xd7\x5b\xea\x05\x02\xe0\x4f\xbe\x7e\xec\x55\x59\x78\xc7\xd7\x65\xb9\x36\xa4\xb6\xda\xf1\xa4\xcc\x03\xe2\xed\x4a\xe5\xda\xd4\xf1\x9d\x32\xb4\x57\xf5\xec\xd5\x64\x72\x39\x9d\x4c\xfe\x4d\x59\xe0\x10\xa1\x78\x28\xd3\x5a\x8e\x3a\x37\xa9\xde\x41\x62\x94\x73\x31\x0b\xc6\x06\x97\x21\xf1\x48\xf6\xe9\x9a\x2e\xdd\x2c\x7a\xae\x55\x46\x3e\x6b\x35\x0d\x58\x55\xac\x09\x2e\x36\x54\x5f\xc2\x85\x2d\x2b\x4f\x30\x8b\x81\x43\xdb\x3e\x77\x09\xa3\x4f\x10\x00\xa1\xfa\x08\x9a\xa6\x47\xf0\xfb\xbb\x05\xb4\x2d\x93\xeb\x12\xc3\xe5\x86\x6a\x68\x5b\x81\x4a\x8a\x07\x0b\xf8\x77\xe0\x61\x94\x55\x65\xcc\xb8\xb2\x86\xc9\xf3\x96\x40\x78\x32\x85\xbf\xbb\x6a\x1a\xa0\x22\x3d\x99\x16\x38\x8c\x29\x30\xd5\xbb\x21\x31\x97\x58\xbd\xf5\xe0\x6c\x12\x33\x44\xf5\xa8\x0e\xe7\x4f\x17\xee\xd0\xe8\x07\x87\x8f\x4f\x15\xd9\x1a\xff\xe7\x11\x9f\xf6\x07\x9e\xeb\x82\x3f\x3a\x26\x05\x76\x4c\xf2\x05\xda\xe1\x9f\x9d\xf7\x09\xec\xde\x4e\x1c\x7f\xac\x1c\xfd\x0a\x00\x00\xff\xff\xde\x64\xe3\x68\xb3\x03\x00\x00"

func linksHtmlBytes() ([]byte, error) {
	return bindataRead(
		_linksHtml,
		"links.html",
	)
}

func linksHtml() (*asset, error) {
	bytes, err := linksHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "links.html", size: 947, mode: os.FileMode(420), modTime: time.Unix(1500670728, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _linksHtml2 = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x92\xcf\x72\xd3\x30\x10\xc6\xef\x79\x8a\x45\x67\xe2\x4d\x08\x07\x52\x24\x33\x43\x92\x01\x66\x0a\x74\x4a\x18\xe0\xa8\xd8\xeb\x58\x41\xb6\x5c\x69\x9d\xc4\x6f\xcf\xc8\x76\xdb\x50\x7a\xc2\xa7\xfd\xe3\xef\xf7\xed\xee\x48\xbe\x58\x7f\x5d\x6d\x7f\xdd\x6c\xa0\xe4\xca\xc2\xcd\xf7\xf7\xd7\x9f\x56\x20\xa6\x88\x3f\x16\x2b\xc4\xf5\x76\x0d\x3f\x3f\x6e\x3f\x5f\xc3\x3c\x99\xc1\x37\xf6\x26\x63\xc4\xcd\x17\x01\xa2\x64\x6e\xae\x10\x4f\xa7\x53\x72\x5a\x24\xce\xef\x71\x7b\x8b\xe7\x48\x99\x47\xd9\x18\x4e\x43\xaf\x49\x72\xce\x45\x3a\x91\xbd\xc9\xb9\xb2\x75\x50\xcf\x00\xe6\xcb\xe5\x72\xd0\x89\x74\x02\x20\x4b\xd2\x79\x0c\x00\x24\x1b\xb6\x94\x7e\x70\x12\x87\x68\xa8\x56\xc4\x1a\x22\x67\x4a\x77\xad\x39\x2a\xb1\x72\x35\x53\xcd\xd3\x6d\xd7\x90\x80\x6c\xc8\x94\x60\x3a\x33\x46\xee\x5b\xc8\x4a\xed\x03\xb1\x6a\xb9\x98\xbe\x11\x38\x82\xac\xa9\x7f\x43\xe9\xa9\x50\x02\x03\x9a\x3a\xa7\x73\x92\x85\x20\xfa\x6e\xfc\x3c\x59\x25\x02\x77\x96\x42\x49\xc4\x8f\x0d\xee\x1a\x1a\x0d\xa2\xe0\x5f\xde\xb8\x66\xe1\x6a\x0e\xc9\xde\xb9\xbd\x25\xdd\x98\x90\x64\xae\x8a\x8a\x77\x85\xae\x8c\xed\xd4\xad\xb6\x74\xd2\xdd\xd5\xeb\xd9\xec\xe5\x62\x36\xfb\x3f\x67\x89\xf7\x27\x93\x3b\x97\x77\xe3\x30\x85\xf3\x15\xe8\x96\x5d\xe6\xaa\xc6\x12\x93\x12\xae\x28\xc6\x51\x01\x64\x6e\x8e\x60\x72\x25\x76\xda\x3f\x14\x2f\xca\x99\x0d\x22\x95\x98\x9b\xe3\x45\xd3\xd4\x4d\xcb\x17\x23\x88\xfe\xd7\xd6\x5b\x01\x8d\xd5\x19\x95\xce\xe6\xe4\x95\xd8\xd4\x4c\x1e\xb8\x24\x68\xbd\x05\x76\x10\x4a\xe7\x99\xea\x48\xec\x19\x0f\x53\x5c\x1a\x3c\x7a\x57\xcd\x5f\xde\x12\xe3\x32\xe9\x64\x48\x42\xe6\x4d\xc3\x10\x7c\xa6\x04\xa2\x3e\xe8\xf3\xd3\x03\xc7\x1a\x5a\xb3\x0b\x78\xb8\x6b\xc9\x77\xf8\x2a\x99\x27\x8b\x31\x49\x2a\x53\x27\x87\x7e\xb9\x81\x94\x3e\x83\xbd\x7f\x0d\x4f\xff\x93\x38\x5c\x58\xf6\xef\x2a\x9d\xfc\x09\x00\x00\xff\xff\xfc\x61\x6a\x79\x49\x03\x00\x00"

func linksHtml2Bytes() ([]byte, error) {
	return bindataRead(
		_linksHtml2,
		"links.html~",
	)
}

func linksHtml2() (*asset, error) {
	bytes, err := linksHtml2Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "links.html~", size: 841, mode: os.FileMode(420), modTime: time.Unix(1500660357, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"close.svg": closeSvg,
	"index.css": indexCss,
	"index.html": indexHtml,
	"index.js": indexJs,
	"links.html": linksHtml,
	"links.html~": linksHtml2,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"close.svg": &bintree{closeSvg, map[string]*bintree{}},
	"index.css": &bintree{indexCss, map[string]*bintree{}},
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
	"index.js": &bintree{indexJs, map[string]*bintree{}},
	"links.html": &bintree{linksHtml, map[string]*bintree{}},
	"links.html~": &bintree{linksHtml2, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

