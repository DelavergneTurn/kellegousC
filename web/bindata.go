// Code generated by go-bindata.
// sources:
// .build/assets/close.svg
// .build/assets/edit.css
// .build/assets/edit.html
// .build/assets/edit.js
// .build/assets/index.js
// .build/assets/links.css
// .build/assets/links.html
// DO NOT EDIT!

package web

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _closeSvg = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\x8e\xc1\x8a\x84\x30\x0c\x86\x5f\x25\xe4\xbe\x69\x9b\x62\xcd\x2e\xd6\xc3\x9e\xdd\x87\x58\x50\x5a\xc1\x19\x65\x2c\x56\xe6\xe9\x87\x56\x2f\x3f\xe1\xfb\xbf\x84\x74\xfb\x11\xe0\x7c\x2c\xcf\xdd\x63\x4c\x69\xfb\x51\x2a\xe7\x4c\xd9\xd2\xfa\x0a\x8a\xb5\xd6\x6a\x3f\x02\x42\x9e\xc7\x14\x3d\x5a\x87\x10\xa7\x39\xc4\x74\xcd\xc7\x3c\xe5\xdf\xf5\xf4\xa8\x41\x83\x75\x60\x1d\xf6\xdd\xf6\x9f\x22\x8c\x1e\xff\x58\xa8\x81\x6f\x72\x3c\xb0\x23\x2b\xd0\x52\x03\x46\xc0\x34\x24\x52\x79\x25\xed\x2d\xdd\xdc\x5c\x5e\xdd\x58\x98\x0c\x43\x89\xc1\x08\xb0\x26\xc3\x8b\x94\x4b\x35\x0a\xff\xaa\x65\x6d\xc0\xc8\x1b\x55\xdf\x95\x87\xfb\x4f\x00\x00\x00\xff\xff\xe5\x79\xbd\x91\xd8\x00\x00\x00"

func closeSvgBytes() ([]byte, error) {
	return bindataRead(
		_closeSvg,
		"close.svg",
	)
}

func closeSvg() (*asset, error) {
	bytes, err := closeSvgBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "close.svg", size: 216, mode: os.FileMode(420), modTime: time.Unix(1584537261, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _editCss = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x94\xcb\x8e\xda\x3c\x14\xc7\xf7\xdf\x53\x44\xb0\x01\x89\x64\x0c\x33\x64\x06\x5b\xfa\x36\x95\xfa\x0e\x5d\x3a\xf6\x49\x72\x34\x8e\x8f\x65\x3b\x90\x99\x88\x77\xaf\x72\xe1\xd2\x32\x55\x2b\x0b\x14\xec\x1f\xb6\xff\x17\xa5\x20\xfd\xd1\x17\x52\xbd\x57\x9e\x5a\xab\x53\x45\x86\x3c\x5f\x3e\x6f\x87\x21\x4a\xb2\x31\x2d\x65\x83\xe6\x83\x2f\xbe\xa3\x97\xc9\x37\xd2\xb0\x98\xe6\x03\x7e\x02\xdf\xbe\xb9\x6e\xfa\x79\x02\xac\xea\xc8\x9f\x19\x3b\x1b\xec\x23\x74\x31\xa5\x23\xf8\xd2\xd0\x89\x83\x31\xe8\x02\x06\x71\xaa\x31\x42\x1a\x9c\x54\xc0\x2d\x9d\xbc\x74\xe2\x0a\xd5\xa8\x35\xd8\x73\x49\xbe\x99\xfe\x2e\x0d\x56\x96\x2b\xb0\x11\xfc\x79\x59\x48\xdf\x9f\x50\xc7\x9a\xe7\xfb\x9d\xeb\x44\x23\x7d\x85\x96\xb3\x44\xb6\x91\x84\xa3\x80\x11\xc9\x72\x0f\x46\x46\x3c\xc2\x79\xd9\x7a\xd3\xff\x83\x80\xfc\x51\x80\x98\xcf\x61\xcc\x75\xc2\x49\xad\xd1\x56\x7c\xb7\x77\x9d\x98\xed\xc9\xf3\x5c\x14\xe4\x35\xf8\xd4\x4b\x8d\x6d\xe0\x2f\xae\x9b\x67\xf8\xd6\x75\x49\x20\x83\x3a\x59\x2a\xa5\x04\xb5\xd1\xa0\x1d\xe4\x5a\x10\x05\x75\x69\xa8\xa5\xa6\x13\x67\xc9\xce\x75\x49\xee\xba\xc4\x57\x85\x5c\xb1\xcd\x30\xb2\xdd\x7a\xbc\x38\x2f\x49\xb5\xa1\x7f\xdc\x91\x1d\xca\x09\xe0\xe9\x09\x8a\x77\x8c\x29\x5a\xd7\xc6\xd4\x19\xa9\xa0\x26\xa3\xc1\xf7\xf3\x25\xb5\xd6\x17\xb4\xa1\xcf\x3f\x12\xaa\x71\xfd\x2f\x1a\x27\xf1\xfb\x9c\x3d\x98\x7c\x97\x8a\x81\x32\xde\xb9\xb8\xdb\xba\x4e\x44\x2f\xed\x9c\xc2\xf8\x38\x24\x99\xec\x18\x6b\x42\x02\x32\x40\x8a\x36\xa5\x36\x8a\xeb\x1a\x0f\x4a\x1a\xf8\xb1\x62\xeb\xdb\x5c\x4a\x1e\x87\x13\x23\xb9\x64\x4a\xfe\x62\x74\x41\x31\x52\x93\x0e\x07\x3f\x9a\x7e\x59\xf5\x43\x84\x7f\xcd\x64\x14\x9d\x19\xb4\xef\x5f\x54\xbf\xcc\x87\x31\x21\x65\xab\xbe\x44\x00\x2e\x4d\x38\x1c\x0e\x23\xfa\xbf\xbc\x98\xca\x0e\xe5\x64\x94\x06\x45\x5e\x8e\x76\x0c\xd9\x4f\x58\x56\xdb\x78\x67\xff\x44\xce\x8d\x18\x2e\x39\x7c\x58\xb2\x2c\xcb\xf2\x8e\x2f\x0d\xc9\xc8\x47\x6d\xe7\xa5\x32\xa1\xbf\xb6\x5d\x16\x81\x4c\x1b\x41\x44\x72\x9c\x89\x11\xe1\x4c\x4c\x6e\xf0\x6b\x91\x47\x27\x6e\x32\xb0\x91\x15\xf0\xd6\x9b\xd5\xe2\x29\x3c\x29\x43\x01\xb2\x70\xac\x16\xeb\x7b\xe8\x7a\xc6\x14\xc3\x35\x8d\x1b\xe1\xc1\x81\x8c\xdc\xd2\xfc\x74\xbf\x36\xb6\xe2\xe5\xcd\x75\xc9\xf0\x25\x54\xeb\x03\x79\xee\x08\xc7\x4d\xee\x9a\x42\x4e\x2a\x8c\x1f\x73\x4f\x54\x5b\xa0\x4a\x0b\xf8\x44\xf0\x2b\x96\xbd\xbe\x6e\x12\xb6\x49\x58\xb6\x7d\xdd\x6f\x92\xed\x5a\xcc\x34\x67\x62\xde\x2a\x85\x23\xd8\x18\x2e\x0e\x9b\x90\x1d\x31\xf4\x17\x2c\x7b\xfe\x9d\x43\x5b\x83\xc7\xc9\x46\x5e\x0f\xef\x9e\x1b\x9c\x9f\xff\xfb\x19\x00\x00\xff\xff\xf0\xc8\xea\x81\x0f\x05\x00\x00"

func editCssBytes() ([]byte, error) {
	return bindataRead(
		_editCss,
		"edit.css",
	)
}

func editCss() (*asset, error) {
	bytes, err := editCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "edit.css", size: 1295, mode: os.FileMode(420), modTime: time.Unix(1584537264, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _editHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x52\x41\xd3\xd3\x20\x10\xbd\xf7\x57\xac\x5c\xb5\x25\x33\x7a\x70\x22\xc4\x43\xad\x27\x67\x74\xb4\x1e\x3c\x52\xd8\x14\x94\x04\x84\x4d\xc7\xfc\x7b\x87\x10\xdb\x38\xdf\xed\xcb\x25\xec\xbe\xdd\xf7\x1e\xbb\x88\x17\x1f\x3e\x1f\xcf\x3f\xbe\x9c\xc0\xd2\xe0\xbb\x9d\xa8\x3f\x00\x61\x51\x99\x72\x00\x10\xe4\xc8\x63\xf7\xcd\x86\x44\x73\xdb\x9e\x8c\x23\x58\x02\xef\xc6\x5f\x82\x57\xb4\x56\x0e\x48\x0a\x2c\x51\xdc\xe3\xef\xc9\xdd\x24\x3b\x86\x91\x70\xa4\xfd\x79\x8e\xc8\x40\xd7\x48\x32\xc2\x3f\xc4\x8b\xd4\x3b\xd0\x56\xa5\x8c\x24\x27\xea\xf7\x6f\x19\x5f\x89\x0a\x35\xd8\x84\xbd\x64\x3c\x73\x34\x8e\x0e\x3a\x67\xb6\x80\xe5\x4b\xe8\x25\xcb\x34\x7b\xcc\x16\x91\x1e\x00\xcd\x11\x57\xfe\xd2\xf0\x94\xae\xb8\xcb\x2d\xe7\x7d\x18\x29\x1f\xae\x21\x5c\x3d\xaa\xe8\xf2\x41\x87\xa1\xb4\xbc\xef\xd5\xe0\xfc\x2c\x3f\xba\xa4\x5e\x1e\x83\xc1\xf6\x4d\xd3\xbc\x7a\xdd\x34\xcf\x13\x17\xfc\xdf\x20\xc5\x25\x98\x79\xf5\xd3\x87\x34\x80\x9a\x28\xe8\x30\x44\x8f\x84\x92\x85\xbe\x5f\xdd\x02\x08\xe3\x6e\xe0\x8c\x64\x17\x95\xee\xc9\x4d\x5a\xfb\xcc\x3a\xc1\x8d\xbb\x6d\x40\x37\xc6\x89\x36\x16\xd8\x52\x3a\x25\xcf\x20\x7a\xa5\xd1\x06\x6f\x30\x49\x76\x1a\x09\x13\x7c\xff\xfa\x09\x28\x40\x2e\x7b\xc4\xb1\xb0\x2d\xfd\x77\x07\x5b\xf2\x87\xee\x10\xff\xd3\x15\xbc\x5c\xa4\xdb\xd5\x20\xeb\xe4\x22\x41\x4e\xfa\xb1\xb4\x9f\x8b\xd1\x8a\xd4\x71\xd4\x29\x08\x5e\x1f\xda\xdf\x00\x00\x00\xff\xff\x35\x76\x2c\x92\x80\x02\x00\x00"

func editHtmlBytes() ([]byte, error) {
	return bindataRead(
		_editHtml,
		"edit.html",
	)
}

func editHtml() (*asset, error) {
	bytes, err := editHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "edit.html", size: 640, mode: os.FileMode(420), modTime: time.Unix(1584537261, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _editJs = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x56\x51\x6f\xdb\xbe\x11\x7f\xcf\xa7\x48\x39\x20\x20\x11\x96\x4e\xfa\x7f\x29\xa2\x09\x41\x9a\x7a\x2b\x86\x76\x29\x92\x3c\x6c\xe8\xfa\x70\x22\x4f\x12\x17\x9a\x54\x48\x2a\xb1\x67\xeb\xbb\x0f\x94\x6c\x47\x4e\x9c\xe6\xdf\x07\x0b\x24\xef\xf8\xbb\x3b\xde\xef\xee\xfc\x00\xfe\x50\xb9\x59\x46\xcb\xd6\xca\xa8\x9d\xa5\x92\x2d\xa5\xb8\xcf\xb7\xfb\x82\x2d\x3d\xc6\xd6\xdb\x43\xe5\x64\x3b\x43\x1b\xc5\x7d\x8b\x7e\x71\x83\x06\x65\x74\x9e\x16\xac\xcb\xa4\xb8\x87\x3f\x7f\xe5\xc2\x98\xf5\x2d\xf9\xcb\x4b\xd2\x23\x44\x9c\x1a\x4c\xbb\xcd\x8d\x10\x46\x77\x38\x70\xc5\x96\x85\x08\x71\x61\x50\x04\x8c\xdf\xbd\x6b\xd0\xc7\x05\x05\xae\x38\x21\xac\xeb\x18\x55\x6e\xb6\x5a\xa5\x6f\xbe\xec\x18\xcb\x52\xc8\xf3\xda\x67\x07\x3b\x31\xa7\xd3\xe2\x09\x99\x2d\x37\xcb\x43\xa0\x6a\x10\x43\x1e\x6b\x1d\xb2\xf4\x11\xf3\xda\xe7\x6a\x58\x2a\x67\xf1\x6f\x36\xe4\x3f\x7e\x0e\x7b\xf4\xde\xf9\xf5\x81\x12\xce\x1a\x07\x6a\x0c\x3c\x58\x52\xc2\x63\x68\x9c\x0d\x78\x8b\xf3\xc8\x65\xae\x44\x88\x10\xdb\x90\xc1\x06\x51\x94\xce\x4f\x41\xd6\x4f\x7e\x02\x5b\x02\x2d\xb8\x64\x1d\xeb\x7a\xec\xde\xd6\x18\x1c\xb6\xe6\xf7\xde\x5e\xbf\x30\xd0\x84\xd0\x81\x68\xbc\x8b\x2e\x2e\x1a\x14\xce\x7e\x76\x16\xf3\xb1\xf2\x38\x3a\xd1\xb4\xa1\xa6\xc0\xb2\x35\x42\x92\x75\xd9\x2e\xc0\x74\xd7\x99\x0d\xc2\xd6\xa1\x37\x21\x1e\x75\xac\xbf\x20\x28\x1c\xa3\xf0\x62\x8d\x33\xaf\x7d\xca\xf0\x35\xde\xb7\x18\xe2\xa0\xd7\x8b\x5f\x07\x0c\x68\xd5\x3f\x6e\xae\xfe\xf9\xd2\xa9\x27\x53\x94\x5c\x3a\x1b\xd1\xc6\xf7\xb7\x8b\x06\x09\x3f\x20\xd0\x34\x46\x4b\x48\xfa\x93\xff\x06\x67\x33\x59\x83\x0f\x18\xf3\x36\x96\x1f\x09\xcb\x46\xde\x58\x45\x13\xbe\x08\xd1\x6b\x5b\xe9\x72\x41\x81\xbd\xe1\xcf\x4b\x5f\xb6\x50\xcf\xdf\x66\x93\xad\x8e\xb2\x4c\x8a\x6b\xbc\xcf\x8b\x54\x01\x7d\x55\x8c\x5f\x68\x4d\x5f\x95\x5b\x7c\x3c\xfc\xd7\xb7\xaf\x5f\x62\x6c\xd6\xcf\x94\x58\xd2\x60\xaf\xc4\xdf\x9d\x6c\xf1\x93\x62\x41\x55\x5f\x51\x15\xc6\x7c\x0f\x47\x36\x86\x28\xf9\xfb\xf4\x96\x70\xe8\x75\x1b\x17\xde\x50\xfe\x7e\x75\x33\x68\x77\x8c\xce\x6b\xbf\x5a\xa5\xef\x53\xe1\x55\xee\xad\xba\x1b\x2a\xad\x4a\x6e\x7d\x72\xad\x55\xda\x56\x97\x46\xa3\x8d\xd7\x28\x23\x65\x99\x72\xb3\xd4\x04\x68\xc5\xc9\x0c\x7c\xa5\xed\xfb\xe8\x1a\xc2\x1f\xb5\x55\xee\x51\x68\x6b\xd1\x7f\x41\x5d\xd5\x71\xf2\xc7\x7b\x10\xf5\xb0\xfc\x70\x4c\x9a\x39\x61\x1d\x87\x97\xa6\x68\x29\x1e\xc0\xb4\xb8\x5a\x11\xc2\x44\xf4\x7a\x46\x59\x06\xef\xf2\xd9\xd1\x11\x9d\xe5\xc0\xef\x28\xe3\x70\x5e\x0b\x69\x20\x84\xaf\x3a\x44\x01\x4a\x51\xf2\xa0\x03\x61\x67\xe3\x63\x8f\x33\xf7\x80\x6b\x09\xeb\xf8\x6e\xaa\x13\x0f\xf0\x01\x6d\xfc\x8c\x25\xb4\x26\x85\x02\xb9\x71\x03\xcf\x44\x03\xb1\xb6\x30\x43\x11\xda\x62\x20\x13\x3d\x65\x22\x34\x46\x47\x4a\x26\x84\xfd\x38\xfd\x99\x0d\x4f\xb5\xd7\xdd\x44\xa1\x94\x1b\x4a\x26\xd0\xe8\x49\xeb\xcd\x84\x1c\x03\xdb\x16\x00\x5d\xb6\xde\x9c\x15\x1d\x5b\xd7\x39\xdd\xad\x2f\xc8\x7b\x16\x37\x89\xe6\x89\x85\x20\xdc\xdd\x39\x85\x1c\x84\x77\x6d\x44\x76\x4e\x8b\x1c\x44\xf2\x2f\x59\xe5\x20\x5a\x6f\x8e\x8e\x68\xad\x43\x74\x7e\x21\x3c\x36\x06\x24\xde\xc4\xc4\x80\x65\xc7\x6d\x6b\x0c\x27\x13\x54\x3a\x4e\xc8\x71\xc1\x78\xf1\x14\xa8\xf3\xba\xd2\xf6\xf8\x80\x24\x09\x47\x11\x71\x1e\xd7\x05\x98\x13\xc2\x71\xcf\x7b\x96\xad\xbc\x23\x6c\x47\xd4\x67\xc0\x68\x9b\xce\x21\xef\x29\x41\x09\xa4\x4d\x6a\x11\x17\x31\x7a\x5d\xb4\x89\x8e\xb5\xc7\x92\xf0\x22\x09\xc6\x96\x92\x65\x68\x1a\xb4\xea\xb2\xd6\x26\x55\x1e\x2f\x36\x30\xa1\x01\x4b\x18\x2f\x9e\x9b\xab\x6d\xec\x8f\xc7\x38\x27\x7f\xcd\x2d\x3c\xe8\x0a\xa2\xf3\xa2\x0d\xe8\x2f\xaa\x34\xb8\xb4\x55\x38\xbf\x2a\x29\xf9\x06\x52\xdb\xe8\x42\x4d\xd8\x39\xf9\x4f\xfb\xe1\x8f\xd3\x8f\x97\x87\x54\xba\x66\xc1\xc8\x19\xb9\x8c\xde\x1c\x5f\x92\x67\xbe\x14\x8c\x6f\x38\x8e\x9c\x44\x0f\x36\x94\xce\xcf\x08\x27\x41\x82\xc1\x7f\xd3\x53\x46\x18\xaf\x30\x0e\xe3\xb4\xa7\x72\x8a\xfa\x13\x04\xbc\xb0\x6a\x3a\x4f\x9e\x51\xe0\x27\x1c\xf8\x29\x63\xec\xec\x8e\xb2\x33\x43\xd7\x93\x21\x35\x7e\x6e\x5f\xce\xa3\xdf\x62\xe2\x5e\x0e\xae\xcf\x72\x42\x32\xa0\x2c\xd3\x25\x2d\x58\xe2\xe5\xa6\x33\x7c\x9e\x7e\x9d\xde\x4e\x53\x83\x1d\x71\xb4\x18\x38\x4a\x7f\x83\x98\xab\xd5\x6e\x30\x77\xe3\x60\x7e\xfd\x72\x27\x2c\xf5\x00\xb3\x53\x97\xcf\x29\x98\xed\xa3\xe0\x40\xb5\xec\x05\x05\x07\x6a\xae\x2b\x73\x87\x3f\xd9\x2e\x51\xc8\xf4\xfa\xfa\xea\xfa\xec\x90\x1c\x43\xf6\x3c\xdd\xd9\xdb\xe9\xee\x78\xd5\xc3\xdf\x53\xd2\x0b\x19\xc7\xcd\xfe\x2f\x72\xd6\x10\xc6\xeb\xa7\xbd\x09\x84\xf1\x72\xbb\x6f\xbd\x21\x8c\x8f\xff\xe2\xb1\x65\x41\x59\xb6\xee\x98\xa0\xd4\x34\xb5\xa5\x14\x14\xda\x34\x0f\x3d\x06\xfd\x3f\x24\xbc\xe0\xef\x4e\x59\x56\xed\xd1\x08\x6d\x31\xd3\x91\x70\xd5\x6b\x94\x7b\x34\xee\x70\xd1\x36\x84\xc3\xab\x0a\x0d\x84\x98\xa6\xed\xeb\x1a\xb2\x06\x5b\xe1\x06\xa3\xde\xa7\x61\xb4\xbc\x23\xdc\xf6\x0a\x29\x07\xf2\xf7\x68\xac\x4b\x2a\x7b\x8a\x56\xb8\xdb\x39\xe5\xab\xac\x4c\x7f\xbe\x96\xc5\x98\x95\x05\xcb\x3e\x9c\x9c\xe4\xb9\x3c\x3a\xda\x94\x45\x5e\x0c\x7d\x33\xb5\xc9\xbe\x61\x96\xa2\x74\xb2\x0d\x69\x90\x50\xc6\x3a\x96\xa1\x09\x78\xb8\x3d\xed\x58\xff\xab\xdc\x6a\x45\x2b\x37\x0c\xcb\x83\xff\x07\x00\x00\xff\xff\x11\xa6\xe7\xa6\x9a\x0b\x00\x00"

func editJsBytes() ([]byte, error) {
	return bindataRead(
		_editJs,
		"edit.js",
	)
}

func editJs() (*asset, error) {
	bytes, err := editJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "edit.js", size: 2970, mode: os.FileMode(420), modTime: time.Unix(1584537263, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _indexJs = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\xdb\x6e\xe3\x36\x13\xbe\xf7\x53\xcc\x8f\x3f\x58\x52\x58\x85\x76\xb6\x77\x31\xdc\x62\xd7\x49\xd1\xc3\xb6\x29\x92\xf4\xa2\x28\x7a\xc1\x95\x46\x32\xd7\x14\x29\xf0\x10\xc7\xcd\xfa\x0d\xfa\x00\x7d\xbe\x3e\x49\xc1\x83\x2c\xc7\x4d\xd2\x02\xbd\x69\x2e\x62\x71\x38\x9c\xf9\xe6\xf4\x91\xb4\xf1\xaa\x72\x42\x2b\x5a\xc0\xc3\x64\x72\xc7\x0d\x9c\x34\xa6\x83\x05\x9c\x50\xd2\x68\xd3\x91\xa2\x9c\x00\x00\x9c\x54\x5d\x9f\xa4\xff\xaf\xba\x7e\x94\x4a\x3b\x48\xa5\xdd\x4b\xbd\x91\x59\xea\x8d\x1c\xa4\x95\xee\xb7\xdf\xe2\x16\x16\xa0\xf8\x9d\x68\xb9\xd3\x86\x79\x8b\xe6\x6d\x8b\xca\x31\xa1\x6a\xbc\xbf\x6a\x28\xf9\x8e\x57\x42\x39\x6d\x57\xa4\x80\xcf\x17\x30\x83\x2f\x80\xfc\xf1\xdb\xef\xa7\x4b\x02\xe7\x40\x96\xce\xc8\xd3\x25\x49\x16\x25\xb7\xee\x47\x23\xe7\x19\x37\xc2\x02\xf6\xe1\x28\xde\x61\x08\x09\xc0\xa0\xf3\x46\xc1\x09\xad\x75\xe5\xbb\xe0\xab\x32\xc8\x1d\x5e\x4a\x0c\xab\xa4\x59\xcc\x27\xbb\x6c\xc7\xa0\x15\xbf\x3e\xb2\x95\xec\xa4\xbd\xca\x85\xc8\x1a\xd3\xb1\x16\x1d\x9d\x15\xe1\xe7\x9d\xf6\xaa\x16\xaa\x5d\x4a\x81\xca\x5d\x63\xe5\x68\x31\x9f\x40\x52\xab\xac\xa5\xa4\xe3\xa6\x15\xea\xd4\xe9\x9e\x94\xb0\x11\xaa\xd6\x1b\x26\x94\x42\xf3\x15\x8a\x76\xe5\xa6\x9f\xc1\x69\xb4\xcd\x56\x69\xfd\xe6\x00\x4f\xc0\xf7\xa5\xd1\xdd\x21\x22\x6f\xc4\x08\xaa\xe7\xc6\x85\x2a\x78\x23\x98\xf5\x1f\xac\x33\x42\xb5\xf4\xac\x60\xb6\x97\xc2\x51\x32\x25\x11\x4d\xce\x43\xd4\xfe\xf9\xec\x97\xd1\x81\xd4\xbc\x7e\x3a\xdc\xe0\x3a\xd6\x2b\x21\xa0\x52\x57\x3c\xa8\xb0\x9e\xbb\x55\xcc\x5b\x0c\x93\xf1\x8f\xfc\x9e\x3e\xc4\x9a\x78\x23\xcf\x81\x4c\x79\x2f\xa6\xde\xc8\x29\x81\xd7\xf1\x78\x2a\x58\xcd\x1d\xbf\xdd\xf6\x78\x0e\xe4\xa3\xd5\x8a\x4c\x00\x76\x05\xe3\x72\xc3\xb7\x76\xec\xc4\xa0\x95\x30\x00\x88\x06\xe8\xff\x82\x80\xe9\xf5\x20\x03\xb0\x2b\xbd\xb9\x34\x46\x9b\xa8\xcb\x30\x7c\x46\x28\xe1\x2f\xc5\x99\x56\xbb\x49\xfc\x89\xa5\xd3\xde\x85\x60\xe2\x89\xb8\x28\xf3\x81\x08\x1a\x16\x59\xe3\xd5\xab\xf4\xc1\x82\xf0\xd3\x27\x20\x64\xbe\x6f\x6a\x76\xc7\x25\xf5\x46\x16\xac\xd1\x95\xb7\x34\xfb\xf4\x46\x5e\x88\x7a\xb9\xe2\xaa\xc5\x24\xdb\x85\xfa\xa5\xec\x06\xac\xef\x85\x5a\x3f\xdd\x9c\x31\xff\x71\x73\x9f\x5b\x6d\x44\x2b\x14\xbc\x06\xb2\xcf\xde\x3c\x84\x11\x26\x90\x39\xbc\x77\x94\x90\x22\xfa\x65\x06\x3b\x7d\x87\x4b\xc9\x43\x8f\x35\xbe\x5a\x0f\x1b\xbc\xae\xb3\x54\x0a\xb5\x0e\xf5\xcf\xbe\x78\x9c\xcb\x67\x26\x81\x70\x52\x0c\x06\x9c\x33\x94\xac\x0c\x36\xa4\x0c\x00\xb3\x38\xba\x1f\x97\xbc\xef\x51\xd5\xb7\x9a\x06\x6c\xa3\x93\xd5\x8b\x4e\x6c\xcf\xd5\xe8\x67\x0f\x74\xa5\x1c\x39\xf4\x92\xe9\xe2\x79\x4f\x31\x1f\x71\xba\x9c\xe1\xca\x46\xb2\x2a\x81\xd8\x8a\x4b\xfc\x89\x9e\x15\x39\xea\x16\xdd\x0d\x4a\xcc\xad\xcd\x2c\xba\x77\xdc\xe2\x5b\x55\x5f\xde\xbb\x80\x87\xe7\x41\x2e\x61\x56\xc2\xb8\x38\x3b\x98\xc0\x7d\xbb\x1d\xd6\xb0\x43\x6b\x79\x9b\xcb\xf8\x77\xb5\x49\x55\x38\x0e\x39\x55\x2c\x05\x83\x43\x62\xb2\x99\xcb\xeb\xeb\xab\xeb\x73\x08\x1d\x30\x78\xfa\x57\x99\x18\x62\x59\x89\x1a\x2f\x0c\xdf\xa0\xf9\xeb\xc8\xbf\x6c\x67\xf6\xc8\xce\x61\xcf\x3f\x4d\x1e\xf9\x12\x18\xc6\xa6\x60\xce\x88\x2e\x8d\x47\x98\xea\xb8\xbd\x18\x38\x7c\x98\xed\x71\x78\xe3\xe8\xe6\xdd\x48\x6e\x32\xc6\x3a\xe2\x7f\x64\x6a\x38\x1f\x2e\x24\xd6\xf0\x1a\xbf\x56\xf4\xcd\x6c\x96\x86\x11\x50\x5a\x3c\x56\xb8\xf2\x6e\xd4\x88\x61\x45\xba\xd6\x8a\x12\xeb\x3f\x74\xc2\x91\x72\x8c\x2a\x97\x19\x59\x6f\xf0\x0e\x95\xbb\xc0\x86\x7b\x99\x69\xfe\x9f\x31\xe5\xc0\x36\xcf\xa6\xe5\x98\x49\x5d\x22\xca\x1f\xae\x6e\x6e\xf3\x7d\x17\x8e\xbe\x4c\xae\x70\x0e\xdf\xdc\x5c\x7d\xcf\xd2\x1d\x20\x9a\x2d\x7d\xc8\xa7\xc2\xff\x5d\xf1\x98\x86\xe1\xbf\xc1\xc3\xf3\xd1\x43\x5c\x8f\xf6\x8f\x8b\xfd\x82\xd9\x03\x0a\x1f\x99\x7b\x64\xf8\x5c\x9f\xb4\x1f\x17\x07\xd4\x7e\xd4\x43\xc1\xaf\x75\xda\x6c\x99\xc1\x5e\xf2\x0a\x6f\x1c\x77\x48\x1f\x76\x25\x28\x2f\x65\x09\x64\x8a\xb5\x70\xfb\xf4\xef\xa1\x0d\x54\x4f\x0f\xa4\xbb\xe1\x36\x08\x15\x8e\x55\x0f\x1d\xb6\xc6\x6d\xad\x37\x8a\x94\x8f\xe6\x28\x4f\x78\x50\xe8\xb9\x75\xf8\xfc\x76\x15\x05\xc7\xfb\xc1\x43\x68\xef\xa8\x21\x45\xb5\x7e\xa2\x85\xf7\x8d\x47\xc8\xf8\x46\x49\x0d\x9f\x72\x7c\x7c\x99\x45\xe0\xf9\xc9\xc2\xeb\xfa\x32\xb4\xff\x7b\x61\x1d\x2a\x34\x94\xa4\xc7\x12\x29\xf3\xab\xa9\x98\x4f\xd2\x47\x38\x79\x6c\x29\xbc\x33\x62\xa3\xef\x8a\xf0\xf3\x67\x00\x00\x00\xff\xff\x02\x84\xe0\x0d\x7b\x0a\x00\x00"

func indexJsBytes() ([]byte, error) {
	return bindataRead(
		_indexJs,
		"index.js",
	)
}

func indexJs() (*asset, error) {
	bytes, err := indexJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.js", size: 2683, mode: os.FileMode(420), modTime: time.Unix(1584537261, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _linksCss = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8f\xd1\x6e\xab\x30\x0c\x86\xef\xcf\x53\xa0\x1e\x9d\xcb\x20\x38\xed\xaa\x11\x2e\x27\xed\x3d\x52\x62\xc0\xaa\x1b\x47\x89\x29\xb0\xa8\xef\x3e\xb1\xb6\x6c\xd5\x54\xf9\x2a\xce\xa7\xff\xfb\x7d\x60\x3b\xa7\x83\x69\x8e\x5d\xe0\xc1\x59\xd5\x30\x71\xd0\x7f\xb7\xe5\x32\x75\xcb\x4e\x54\x6b\x4e\x48\xb3\xde\xbc\x63\x30\xd9\x1b\x5b\xd8\x5c\xf7\x11\x3f\x40\x97\xaf\x7e\xba\x3e\x47\xc0\xae\x17\xbd\x2d\x8a\x0b\x61\x12\x98\x44\xf1\x19\x42\x4b\x3c\x6a\x20\x42\x1f\x31\xd6\x63\x8f\x02\x2a\x7a\xd3\x80\x76\x3c\x06\xe3\xeb\x15\xea\xd1\x5a\x70\x97\x9c\xd0\x1d\x63\x1a\xd1\x4a\xaf\xf7\x2f\xff\xea\x93\x09\x1d\x3a\x5d\x64\x66\x10\x7e\x82\x67\x26\xdd\x9a\x17\x5b\x53\xb5\xbb\xfa\xcb\x6f\xa1\xe1\x60\x04\xd9\x69\xc7\x0e\x56\x56\xf7\x4b\x4a\x62\x6f\x1a\x94\x59\xe7\xfb\xfb\x4f\xde\x0e\x44\x6a\x08\x94\x7e\x5c\xb8\xf7\x53\x7d\x0b\xb7\xd6\xde\xd1\xbe\x5c\x8d\x65\x55\xb5\xed\xad\xa6\x3a\xb0\x08\x9f\xf4\xae\xf0\xd3\x37\xfa\x54\x38\x50\xf2\xc6\x5a\x74\x9d\x2e\x6a\xc2\x28\x2a\xca\x4c\xa0\x64\xf6\xf0\xd0\x79\xa0\x8c\x30\x3d\x3a\xfe\x2f\x0e\x8b\xe7\xbc\x47\x89\xf7\x36\x15\x2c\xb3\xae\x7f\x9b\xff\x7c\x06\x00\x00\xff\xff\x81\x98\x79\x75\xf3\x01\x00\x00"

func linksCssBytes() ([]byte, error) {
	return bindataRead(
		_linksCss,
		"links.css",
	)
}

func linksCss() (*asset, error) {
	bytes, err := linksCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "links.css", size: 499, mode: os.FileMode(420), modTime: time.Unix(1584537261, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _linksHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x52\x4d\x8f\xd3\x30\x10\xbd\xef\xaf\x18\xac\xbd\xb1\x8d\xbb\x82\x03\x0a\xb6\x11\x2a\x5f\x87\x95\x40\xb0\x1c\x38\x7a\x93\x49\x6d\xd5\x8d\x8b\x67\x52\x11\x45\xd9\xdf\x8e\xf2\xa5\x6d\xcb\x87\x2f\xd1\x78\xde\x7b\xf3\xe6\xc5\xea\xd9\xbb\xcf\x9b\xfb\x1f\x5f\xde\x83\xe3\x7d\x30\x57\x6a\xf9\xa0\x2d\xcd\x15\x00\x80\x62\xcf\x01\xcd\x37\x17\x13\xb7\x79\xfe\xb6\x60\x7f\x44\xb8\xf3\xf5\x8e\x94\x9c\x7a\x13\x6e\x8f\x6c\xc1\x31\x1f\x56\xf8\xb3\xf1\x47\x2d\x36\xb1\x66\xac\x79\x75\xdf\x1e\x50\x40\x31\x55\x5a\x30\xfe\x62\x39\x8c\x79\x0d\x85\xb3\x89\x90\x75\xc3\xd5\xea\x95\x90\xb3\x50\xf0\xf5\x0e\x5c\xc2\x4a\x0b\x49\x72\xa8\x28\x2b\x88\xc4\xd8\x1d\x4e\xc2\xa0\x05\x71\x1b\x90\x1c\x22\x8b\x3f\x79\x83\x0d\xca\xa5\xac\x62\xcd\x94\x6d\x63\xdc\x06\xb4\x07\x4f\x59\x11\xf7\xb2\x20\x7a\x53\xd9\xbd\x0f\xad\xfe\xe0\x93\x7d\xbe\x89\x25\xe6\x2f\xd7\xeb\x9b\x17\xeb\xf5\xff\x86\x28\x39\xa5\xa2\x1e\x62\xd9\xce\x33\x4b\x7f\x84\x22\x58\x22\x2d\x46\xa3\xb3\x97\xb1\xe7\x6e\xcd\x9c\xd6\xc7\xb8\x04\xe6\x6e\x4f\x00\x4d\x78\x2a\x86\xd3\x75\x90\x6c\xbd\x45\xb8\xde\x61\x7b\x03\xd7\x29\x36\x8c\x90\x6b\xc8\xa0\xef\xcf\x90\x2a\xf8\x73\xea\x78\x69\xe7\xed\xbb\x6e\xe6\x66\xdf\xbf\xde\x41\xdf\x0b\xb3\x8d\x72\xb8\xdc\x61\x0b\x7d\x0f\x8f\x8f\x06\x94\xb4\xe6\xdf\x84\x65\xa7\xaa\x09\x61\xd5\xa4\x20\xcc\x25\x64\xe4\x3f\x24\x90\x7f\xf1\x71\x12\x8a\xf3\x4c\xc2\x7c\xf2\x4c\x39\x3c\x49\x0c\xf5\xa8\x51\xfa\xe3\x39\x5f\xc9\xcb\xcd\xba\x0e\xb0\x2e\x4f\x03\x50\x72\x09\x6e\x16\x50\x72\xfa\x23\x4a\x4e\xaf\xf7\x77\x00\x00\x00\xff\xff\xa7\x71\xdd\x63\xd5\x02\x00\x00"

func linksHtmlBytes() ([]byte, error) {
	return bindataRead(
		_linksHtml,
		"links.html",
	)
}

func linksHtml() (*asset, error) {
	bytes, err := linksHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "links.html", size: 725, mode: os.FileMode(420), modTime: time.Unix(1584537263, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"close.svg": closeSvg,
	"edit.css": editCss,
	"edit.html": editHtml,
	"edit.js": editJs,
	"index.js": indexJs,
	"links.css": linksCss,
	"links.html": linksHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"close.svg": &bintree{closeSvg, map[string]*bintree{}},
	"edit.css": &bintree{editCss, map[string]*bintree{}},
	"edit.html": &bintree{editHtml, map[string]*bintree{}},
	"edit.js": &bintree{editJs, map[string]*bintree{}},
	"index.js": &bintree{indexJs, map[string]*bintree{}},
	"links.css": &bintree{linksCss, map[string]*bintree{}},
	"links.html": &bintree{linksHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

