// Code generated by go-bindata.
// sources:
// .build/assets/close.svg
// .build/assets/edit.css
// .build/assets/edit.html
// .build/assets/edit.js
// .build/assets/index.js
// .build/assets/links.css
// .build/assets/links.html
// DO NOT EDIT!

package web

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _closeSvg = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\x8e\xc1\x8a\x84\x30\x0c\x86\x5f\x25\xe4\xbe\x69\x9b\x62\xcd\x2e\xd6\xc3\x9e\xdd\x87\x58\x50\x5a\xc1\x19\x65\x2c\x56\xe6\xe9\x87\x56\x2f\x3f\xe1\xfb\xbf\x84\x74\xfb\x11\xe0\x7c\x2c\xcf\xdd\x63\x4c\x69\xfb\x51\x2a\xe7\x4c\xd9\xd2\xfa\x0a\x8a\xb5\xd6\x6a\x3f\x02\x42\x9e\xc7\x14\x3d\x5a\x87\x10\xa7\x39\xc4\x74\xcd\xc7\x3c\xe5\xdf\xf5\xf4\xa8\x41\x83\x75\x60\x1d\xf6\xdd\xf6\x9f\x22\x8c\x1e\xff\x58\xa8\x81\x6f\x72\x3c\xb0\x23\x2b\xd0\x52\x03\x46\xc0\x34\x24\x52\x79\x25\xed\x2d\xdd\xdc\x5c\x5e\xdd\x58\x98\x0c\x43\x89\xc1\x08\xb0\x26\xc3\x8b\x94\x4b\x35\x0a\xff\xaa\x65\x6d\xc0\xc8\x1b\x55\xdf\x95\x87\xfb\x4f\x00\x00\x00\xff\xff\xe5\x79\xbd\x91\xd8\x00\x00\x00"

func closeSvgBytes() ([]byte, error) {
	return bindataRead(
		_closeSvg,
		"close.svg",
	)
}

func closeSvg() (*asset, error) {
	bytes, err := closeSvgBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "close.svg", size: 216, mode: os.FileMode(436), modTime: time.Unix(1517201887, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _editCss = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x94\xdb\x6e\xfa\x38\x10\xc6\xef\xf7\x29\xa2\xa2\x55\x41\xc2\xa9\xa1\x85\x16\x5b\xda\x87\xd8\xbb\xbd\x74\xec\x49\x62\xd5\xf1\x58\x3e\x40\x68\x94\x77\x5f\xe5\x00\x64\xb7\x5d\xad\xfe\x8a\x90\x82\xfd\xb3\x67\xe6\x9b\x6f\x52\xa0\xba\x76\x85\x90\x9f\x95\xc7\x64\x15\x5b\x95\x65\xc9\x4b\xb4\x91\x94\xa2\xd1\xe6\xca\x9e\xff\x14\x06\x2e\xe2\xfa\xbc\xcd\x82\xb0\x81\x04\xf0\x7a\x26\x82\xfe\x02\xf6\xb6\x77\xed\xf4\xf7\x02\xba\xaa\x23\x7b\xa5\xb4\x2f\xd1\x37\x5d\x84\x36\x12\x61\x74\x65\x99\x04\x1b\xc1\xf7\xab\x42\xf8\xee\xa2\x55\xac\xd9\xf1\x30\x9c\x6b\x84\xaf\xb4\x65\x34\x13\x29\x22\x77\x18\x74\xd4\x68\x99\x07\x23\xa2\x3e\x43\x9f\x63\x8a\x2e\xc5\xf9\xcc\x8e\xd2\xdf\xf9\xe2\x56\x3f\xc4\xeb\xf3\x5a\xdb\xd8\x3d\x12\xda\x7d\xb8\x96\x4b\x34\xe8\x59\xe5\xe1\x3a\xc7\x20\x23\xcc\x0e\x2e\xf6\x79\xa9\xc1\xa8\xee\x57\x8a\x7c\xfd\xa1\x48\xee\x84\x52\xda\x56\x6c\x7f\xb8\x07\x5c\x9d\x4e\x27\x5e\xa0\x57\xe0\x89\x17\x4a\xa7\xc0\xde\x5c\x3b\xaf\xb0\x9d\x6b\xb3\x80\x46\xab\x6c\x25\xa5\xe4\x98\xa2\xd1\x16\x98\x45\x0b\xbc\xc0\x96\x84\x5a\x28\xbc\x30\x9a\xed\x5d\x9b\x1d\x5d\x9b\xf9\xaa\x10\x6b\xba\x1d\x9f\x7c\xbf\xe1\xb3\x74\x94\xba\xb6\xcf\x43\x8d\x3e\x26\x6f\xba\x65\x5e\x05\x1a\xd5\xe7\xc1\x09\x09\xbe\xab\xa7\xb5\x8f\x11\x1f\x8b\x66\x25\xca\x14\xba\xef\xf9\xd0\x53\x79\x43\x18\xb9\x40\xf1\xa9\x23\xd1\xd6\xa5\x48\x9c\x11\x12\x6a\x34\x0a\x7c\x37\x17\xa9\x94\x7a\xc0\x0d\x7e\xfd\x17\xb3\x92\x8d\xeb\xfe\xa1\xd2\x54\xc0\xe1\x48\xbf\xf5\x7e\xd1\x56\x03\x65\x5c\x68\xbf\xdf\xb9\x96\x47\x2f\xec\x6c\x8e\xf1\x75\x30\x58\xb6\xa7\xb4\x09\x19\x88\x00\x44\x5b\x82\x29\xf2\xfb\x1e\x0b\x52\x18\xf8\x6b\x4d\x37\x8f\x35\x82\x5e\x0f\x11\x23\xba\x6c\x32\xe4\xad\x55\x05\xc6\x88\x0d\x19\x02\x7f\x6f\xdb\x6d\x77\x34\xd0\xff\x76\x75\x2c\x3a\x37\xda\x7e\x2e\xa6\x8a\xcc\xa2\x94\xc7\xe1\x99\x90\x32\xc9\x1f\x11\x80\x85\x97\x46\xf4\x0f\x71\x13\x95\x9e\xca\x49\x28\x05\x12\xbd\x18\xe5\x18\xdc\x33\x61\x79\x6d\xe3\x42\xfe\x89\x9c\x3d\x35\x24\x39\xfc\x68\x36\x0c\xf8\x82\x2f\x0d\x8a\x38\x4f\xd2\x4a\x9a\xd0\xdd\x87\x50\x14\x01\x4d\x8a\xc0\x23\x3a\x46\xf9\x34\x3f\x94\x4f\x6a\x30\x7a\x33\xe3\xa8\xc4\xa3\x0c\xdd\x88\x0a\x58\xf2\x66\xfd\xf4\x12\x5e\xa4\xc1\x00\x79\x38\x57\x4f\x9b\x25\x74\x8f\x31\xb5\xe1\xde\x8d\x07\xe1\xc1\x81\x88\xcc\xe2\xfc\xb6\xdc\x9b\x3e\x3b\x1f\xae\xcd\xde\xc6\x51\x4f\x3e\xa0\x67\x0e\xf5\x78\xc9\xc2\x29\xe8\x84\xd4\xf1\x3a\xfb\x44\xa6\x42\x4b\x52\xc0\x97\x06\xbf\xa6\xf9\xfb\xfb\x36\xa3\xdb\x8c\xe6\xbb\xf7\xc3\x36\xdb\x6d\xf8\x4c\x33\xca\xe7\xab\x08\x9c\xc1\xc6\x70\x53\xd8\x84\xfc\xac\x43\x77\xc7\xf2\xd7\x7f\x83\xda\xd6\xe0\xf5\xa4\x23\xab\xf1\x0c\x7e\x41\x1f\xfb\xdf\xfe\x0e\x00\x00\xff\xff\xcd\x12\x61\xa9\x6c\x05\x00\x00"

func editCssBytes() ([]byte, error) {
	return bindataRead(
		_editCss,
		"edit.css",
	)
}

func editCss() (*asset, error) {
	bytes, err := editCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "edit.css", size: 1388, mode: os.FileMode(436), modTime: time.Unix(1517201887, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _editHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x94\xc1\x6e\xd4\x30\x10\x86\xef\x7d\x8a\xc1\x27\x90\x68\xbc\x12\x1c\x50\x71\xc2\xa1\x2d\x15\x52\x45\x51\xbb\x3d\x70\x42\x5e\x67\xb2\x36\x75\x6c\x63\x4f\xb6\xe4\xed\x91\xd7\xd9\xdd\x6c\xe9\x01\x95\x5c\x62\xcf\x68\x7e\x7f\x9e\xfc\x13\xf1\xea\xe2\xe6\x7c\xf9\xfd\xdb\x25\x68\xea\x6d\x73\x22\xca\x0b\x40\x68\x94\x6d\x5e\x00\x08\x32\x64\xb1\xb9\xf2\x82\x97\x55\x89\xf6\x48\x12\x34\x51\x38\xc5\x5f\x83\xd9\xd4\xec\xdc\x3b\x42\x47\xa7\xcb\x31\x20\x03\x55\x76\x35\x23\xfc\x4d\x3c\xcb\x7e\x04\xa5\x65\x4c\x48\xf5\x40\xdd\xe9\x07\xc6\x27\x21\x6b\xdc\x03\xe8\x88\x5d\xcd\x78\xe2\xd8\x1a\xaa\x54\x4a\x6c\x9b\xcc\x4f\x44\x5b\xb3\x44\xa3\xc5\xa4\x11\xe9\x90\xa0\x31\xe0\xa4\x9f\x0b\xfe\x96\xcb\x74\xe9\x8c\xf3\xce\x3b\x4a\xd5\xda\xfb\xb5\x45\x19\x4c\xaa\x94\xef\x73\xc9\xa7\x4e\xf6\xc6\x8e\xf5\xad\xb4\xf8\x28\xc7\xb3\xf7\x8b\xc5\xdb\x77\x8b\xc5\xcb\x8e\x16\x7c\xd7\x32\xb1\xf2\xed\x38\xd1\x74\x3e\xf6\x20\x07\xf2\xca\xf7\xc1\x22\x61\xcd\x7c\xd7\x4d\xac\x00\xa2\x35\x1b\x30\x6d\xcd\x56\x32\xee\x83\xb3\xb0\xb2\x89\x35\x82\xb7\x66\x33\x4b\x1a\x17\x06\x9a\x21\x30\x50\x56\xa6\x54\xb3\xce\xa0\x6d\xd9\xb6\x70\x88\x96\x41\xb0\x52\xa1\xf6\xb6\xc5\x58\xb3\x4b\x47\x18\x81\x34\xc2\x10\x2d\x90\x87\xa4\x7d\x24\x74\x59\x7f\xab\xd8\x9c\x1c\x9f\x3f\x89\xa6\x20\x15\xc6\x3d\xc5\xbf\x62\x14\xf9\x2d\x46\xe6\x39\xec\x8e\xa0\x2e\x30\x99\x88\x2d\xdc\x15\x16\x6c\xe1\xfe\xf6\x7a\x4e\xf4\x2c\x92\x1f\x28\x0c\x34\xeb\x17\x80\x48\x41\xba\x5d\x5e\x1b\x47\xac\xf9\x1c\x7d\x0f\x37\xd7\x5f\xbe\xfe\xb8\xba\xbf\xbc\x5b\xc2\x6b\x5f\xae\x6f\x72\x23\x1c\xd2\x9b\x33\xc1\x73\xd5\x5c\x66\xed\x2b\x6f\x8d\xab\x56\x83\xb1\x2d\x3f\x12\xdd\xdd\x00\x50\x69\xcf\x9a\xaa\xaa\xa6\x72\x7e\x60\x7c\xf2\xa1\x5e\x8e\xfc\x04\x56\x5a\x70\x48\x8f\x3e\x3e\x3c\x0f\xfd\x7f\xa4\xc7\x9b\xbd\xf5\xfa\x70\x64\x3d\xc1\xb3\x97\x27\x03\x88\xa4\xa2\x09\x04\x29\xaa\xc3\xd4\xfe\xdc\x7a\xb5\x64\xca\x44\x94\x41\x10\xbc\xfc\x55\xfe\x04\x00\x00\xff\xff\x3a\x47\x38\x19\x6d\x04\x00\x00"

func editHtmlBytes() ([]byte, error) {
	return bindataRead(
		_editHtml,
		"edit.html",
	)
}

func editHtml() (*asset, error) {
	bytes, err := editHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "edit.html", size: 1133, mode: os.FileMode(436), modTime: time.Unix(1517201890, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _editJs = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x56\x51\x6f\xe3\xb8\x11\x7e\xcf\xaf\x48\x58\x20\x20\x11\x86\x4e\xf6\x5e\x0e\xe1\x09\x87\x6c\xd6\xed\xa2\xd8\xdb\x2c\x92\x14\x68\xb1\xdd\x07\x8a\x1c\x49\xac\x69\x52\x26\xa9\xc4\xae\xad\xff\x5e\x50\x92\x1d\x39\x71\x36\x6d\x1f\xe2\x88\xe4\xf0\x9b\xe1\xf0\xfb\x66\xf8\x28\xfc\xb1\x72\x73\x8e\x8b\xc6\xca\xa8\x9d\xc5\x39\x59\xe7\x6c\x91\xed\xc6\x92\xac\x3d\xc4\xc6\xdb\x63\xe5\x64\x33\x07\x1b\xd9\xa2\x01\xbf\xba\x07\x03\x32\x3a\x8f\x25\x69\x79\xce\x16\xe2\xbf\xdf\x72\x6d\xcc\xb0\x4b\xfe\x74\x93\xf4\x20\x22\x4c\x0d\xa4\xd1\x76\x47\x08\xa3\x3d\x54\x50\x45\xd6\x92\x85\xb8\x32\xc0\x02\xc4\x6f\xde\xd5\xe0\xe3\x0a\x0b\xaa\x28\x42\xa4\x6d\x09\x56\x6e\xbe\xd9\xa4\xdf\x6c\xdd\x12\xc2\xd3\x91\x97\x95\xe7\x47\x7b\x67\x4e\xb3\xa3\x68\xc8\x7a\xfb\x79\x2c\xb0\xea\x97\x45\x16\x2b\x1d\x78\xfa\x61\xcb\xca\x67\xaa\xff\x54\xce\xc2\x9f\x6d\xc8\xbe\xff\xe8\xc7\xe0\xbd\xf3\xc3\x84\x62\xce\x1a\x27\xd4\x18\xb8\xf7\xa4\x98\x87\x50\x3b\x1b\xe0\x01\x96\x91\xe6\x99\x62\x21\x8a\xd8\x04\x2e\xb6\x88\xac\x70\x7e\x2a\x64\xf5\x1c\xa7\x20\x6b\x81\x25\xcd\x49\x4b\xda\x0e\xbb\xf3\x35\x06\x17\x3b\xf7\x07\x77\x0f\x19\x16\x38\x21\xb4\x82\xd5\xde\x45\x17\x57\x35\x30\x67\x3f\x39\x0b\xd9\xd8\x78\x7c\x3a\x56\x37\xa1\xc2\x82\xf0\x01\x21\xad\xb5\x7c\x1f\x60\xba\x1f\xcc\x16\x61\x17\xd0\xbb\x10\x4f\x3a\x56\x9f\x41\x28\x18\xa3\x50\x39\xe0\x2c\x2b\x9f\x6e\xf8\x0e\x16\x0d\x84\xd8\xdb\x75\xcb\x6f\x03\x06\xb0\xea\xaf\xf7\xb7\x5f\x5f\x07\xf5\xec\x0a\xa3\x1b\x67\x23\xd8\x78\xfe\xb0\xaa\x01\xd1\x23\x24\xea\xda\x68\x29\x92\xfd\xe4\x5f\xc1\x59\x2e\x2b\xe1\x03\xc4\xac\x89\xc5\xaf\x88\xf0\x51\x34\x56\xe1\x84\xcf\x42\xf4\xda\x96\xba\x58\x61\x41\xde\x89\xe7\x75\x2c\x3b\xa8\x97\xb9\xd9\xde\x56\x8b\x09\xcf\xd9\x1d\x2c\x32\x99\x14\xd0\xa9\x62\x9c\xa1\x81\xbe\x65\x66\xe1\xe9\xf8\xef\x7f\x7c\xf9\x1c\x63\x3d\xa4\x89\x97\xcc\xd5\xd0\x19\xd1\x93\x8b\x1d\x7e\x32\x94\xb8\xec\x14\x55\x42\xcc\x0e\x70\x64\xeb\x08\xa3\xbf\x4c\x1f\x10\x15\x9d\x6d\xed\xc2\x3b\xc6\xdf\x6e\xef\x7b\xeb\x96\xe0\x65\xe5\x37\x9b\xf4\xfb\x2c\xbc\xd2\xbd\xa7\xbb\x5e\x69\xb3\x14\xd6\x47\xd7\x58\xa5\x6d\x79\x63\x34\xd8\x78\x07\x32\x62\xc2\x95\x9b\xa7\x22\x80\x67\x14\xcd\x85\x2f\xb5\x3d\x8f\xae\x46\xf4\x49\x5b\xe5\x9e\x98\xb6\x16\xfc\x67\xd0\x65\x15\x27\xbf\x9c\x0b\x56\xf5\x9f\x1f\xce\x50\xbd\x44\xa4\xa5\xe2\xb5\x2b\x5c\xb0\x47\x61\x1a\xd8\x6c\x10\x22\x2c\x7a\x3d\xc7\x84\x8b\x93\xac\x3e\x3d\xc5\x75\x26\xe8\x1c\x13\x2a\x7e\x37\x4c\x1a\x11\xc2\x17\x1d\x22\x13\x4a\x61\xf4\xa8\x03\x22\x57\xe3\x69\x0f\x73\xf7\x08\xc3\x0a\x69\xe9\x2b\xd5\x8b\x0c\x57\x07\x7c\xe9\x02\x8b\x93\x6c\x41\xd6\x8b\x4c\x70\xe9\x6c\x70\x06\x98\x71\x25\x46\xf7\x95\xf3\xf1\x6f\xde\x1c\xcb\x4a\xd8\x12\xd4\x55\xca\x2c\x2f\x9c\xc7\x7d\xda\x2e\x68\x9e\x05\x2e\x7f\xcb\x99\x01\x5b\xc6\x8a\xcb\xb3\xb3\xde\x15\x64\xf9\x77\xf9\x63\x0f\x0d\x08\x87\x3e\x3f\xa9\xe2\x64\xa2\x6d\x5b\x5a\xee\x5d\x66\xa2\x2a\x3c\x82\x8d\x9f\xa0\x10\x8d\x49\xd9\x16\x99\x71\xbd\x14\x58\x2d\x62\x65\xc5\x1c\x58\x68\xf2\x9e\xef\xf8\x92\xb0\x50\x1b\x1d\x31\x9a\x20\xf2\xfd\xf2\x07\xef\xc3\x3a\x98\xd1\xa3\x44\xf3\xc4\x1f\x8c\x26\xa2\xd6\x93\xc6\x9b\x09\x3a\x13\x64\x27\x52\xbc\x6e\xbc\xb9\x92\x2d\x19\x6a\x11\xde\xaf\x01\x09\x3a\xcf\x3a\xb5\xd5\x49\x8e\x49\x2d\xba\xc0\x39\x73\x33\x92\xfe\x67\x39\xf3\xae\x89\xd0\x5b\xaa\x2c\x67\x29\xd8\x14\x02\xcf\x59\xe3\xcd\xe9\x29\xae\x74\x88\xce\xaf\x98\x87\xda\x08\x09\xf7\x31\x31\x76\xdd\x52\xdb\x18\x43\xd1\x04\x94\x8e\x13\x74\xa6\x08\x55\xcf\xa7\x76\x5e\x97\xda\x9e\xa1\xb4\x40\x81\x45\x58\xc6\xa1\x5e\x64\x08\x51\x38\x70\xfd\x45\x23\x67\x88\xec\x2d\x75\x84\x31\xda\xa6\xf9\x3c\xeb\x18\x8c\x91\x48\x83\x54\xd1\xae\x63\xf4\x3a\x6f\x92\x7a\x2a\x0f\x05\xa2\x2a\x2d\x8c\x3d\x25\xcf\xa2\xae\xc1\xaa\x9b\x4a\x1b\x85\xf3\x14\xe2\x00\x13\x6a\x61\x11\xa1\xea\xa5\xbb\xca\xc6\x6e\x7a\x8c\x73\xf1\x5b\x66\xc5\xa3\x2e\x45\x74\x9e\x35\x01\xfc\x75\x99\xfa\xac\xb6\x0a\x96\xb7\x05\x46\x7f\x08\xa9\x6d\x74\xa1\x42\xe4\x77\xf4\xcf\xe6\xc3\x2f\x97\xbf\x9e\xdf\xa0\x2b\x74\x13\xbd\x39\xbf\x41\x2f\xa2\x48\x89\x1a\xc4\x08\x14\x45\x2f\x6c\x28\x9c\x9f\x23\x8a\x82\x14\x06\xfe\x81\x2f\x09\x22\xf4\xa8\x84\xd8\x37\xfe\x4e\x08\xe9\xc0\x1f\x45\x80\x6b\xab\xa6\xcb\x14\x14\xce\xe9\x05\xcd\xe9\x25\x21\x2d\x98\x00\xc7\x89\x2b\xdd\x87\xc5\x79\xdf\x3b\x52\xaf\xa2\xfe\xa5\x98\xf2\xff\x8d\x99\x07\x39\x39\xcc\x65\x08\x71\xd1\x0b\x31\x27\x89\xa6\xdb\x62\xf6\x69\xfa\x65\xfa\x30\x45\x74\xcc\xd8\xbc\x67\x2c\x3e\x44\xd3\x5d\x3d\xdb\xa7\xa9\x64\x6e\xb6\xd9\x58\x2c\x47\xe7\x99\x8f\xcf\xf3\xf3\x34\x5e\x90\x54\xb9\xec\x9e\x54\x5f\x32\x91\x1f\x62\x62\xcf\x38\xfe\x8a\x89\x3d\x43\x79\x9f\xc5\x3d\x1a\xf1\x7d\xde\xa1\xe9\xdd\xdd\xed\xdd\xd5\x31\x3a\x13\xfc\x25\x03\xf9\xfb\x77\xdf\xd2\xa3\x59\x87\xbf\xc0\xa8\x5b\x25\x14\xb6\xe3\x3f\xc9\x79\x8d\x08\x35\xcf\x63\x13\x10\xa1\xc5\x6e\xdc\x78\x83\x08\xad\x76\xe3\x90\x6a\x61\x3f\x19\xb2\x6b\xef\xc5\x6a\xdc\x58\x8d\x96\xc0\xa4\x30\x06\xef\x5e\x8f\x25\xc4\xe1\xe9\x18\x3e\xae\x6e\x52\x06\xbe\x8a\x39\x60\x04\xb2\x72\x88\x10\x5a\xd3\xc5\xe8\xd9\x4b\xd6\x12\x13\x3e\x74\x11\xa1\xd4\x34\xd5\xc1\x94\x32\xb0\xe9\x8d\xe0\x21\xe8\x7f\x03\xa2\x92\x9e\x5c\x12\x3e\x3b\x60\x11\x9a\x7c\xae\x23\xa2\x65\x67\x51\x1c\xb0\x98\xc1\xaa\xa9\x11\x15\x6f\x1a\xd4\x22\x44\xf8\x99\x41\xdf\x06\xb6\x16\xd5\xdb\x3e\xd4\x9b\x06\x83\x8f\xb7\x0d\xb6\x3e\x7a\x0b\x73\xc8\xc2\x68\x39\x43\xd4\x77\x06\xff\x87\x14\x8f\x76\x3a\x2b\x61\xbf\x1b\xbc\xad\xad\x7c\xdb\x02\xd4\x58\x5b\x39\xe1\x1f\x2e\x2e\xb2\x4c\x9e\x9e\x6e\xf5\x9d\x1e\xd6\xa9\x0d\xa4\x92\x9f\xb4\x4e\x0b\x56\x38\xd9\x84\xd4\xc4\x31\x21\xed\x50\x5c\x76\xb3\x2d\xe9\xfe\x4a\xb7\xd9\xe0\xd2\xf5\x0f\x95\xa3\xff\x04\x00\x00\xff\xff\x1b\x46\xef\xe2\x16\x0d\x00\x00"

func editJsBytes() ([]byte, error) {
	return bindataRead(
		_editJs,
		"edit.js",
	)
}

func editJs() (*asset, error) {
	bytes, err := editJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "edit.js", size: 3350, mode: os.FileMode(436), modTime: time.Unix(1517201890, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _indexJs = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\xdb\x6e\xe3\x36\x13\xbe\xf7\x53\xcc\x8f\x3f\x58\x52\x58\x85\x76\xb6\x77\x31\xdc\x62\xd7\x49\xd1\xc3\xb6\x29\x92\xf4\xa2\x28\x7a\xc1\x95\x46\x32\xd7\x14\x29\xf0\x10\xc7\xcd\xfa\x0d\xfa\x00\x7d\xbe\x3e\x49\xc1\x83\x2c\xc7\x4d\xd2\x02\xbd\x69\x2e\x62\x71\x38\x9c\xf9\xe6\xf4\x91\xb4\xf1\xaa\x72\x42\x2b\x5a\xc0\xc3\x64\x72\xc7\x0d\x9c\x34\xa6\x83\x05\x9c\x50\xd2\x68\xd3\x91\xa2\x9c\x00\x00\x9c\x54\x5d\x9f\xa4\xff\xaf\xba\x7e\x94\x4a\x3b\x48\xa5\xdd\x4b\xbd\x91\x59\xea\x8d\x1c\xa4\x95\xee\xb7\xdf\xe2\x16\x16\xa0\xf8\x9d\x68\xb9\xd3\x86\x79\x8b\xe6\x6d\x8b\xca\x31\xa1\x6a\xbc\xbf\x6a\x28\xf9\x8e\x57\x42\x39\x6d\x57\xa4\x80\xcf\x17\x30\x83\x2f\x80\xfc\xf1\xdb\xef\xa7\x4b\x02\xe7\x40\x96\xce\xc8\xd3\x25\x49\x16\x25\xb7\xee\x47\x23\xe7\x19\x37\xc2\x02\xf6\xe1\x28\xde\x61\x08\x09\xc0\xa0\xf3\x46\xc1\x09\xad\x75\xe5\xbb\xe0\xab\x32\xc8\x1d\x5e\x4a\x0c\xab\xa4\x59\xcc\x27\xbb\x6c\xc7\xa0\x15\xbf\x3e\xb2\x95\xec\xa4\xbd\xca\x85\xc8\x1a\xd3\xb1\x16\x1d\x9d\x15\xe1\xe7\x9d\xf6\xaa\x16\xaa\x5d\x4a\x81\xca\x5d\x63\xe5\x68\x31\x9f\x40\x52\xab\xac\xa5\xa4\xe3\xa6\x15\xea\xd4\xe9\x9e\x94\xb0\x11\xaa\xd6\x1b\x26\x94\x42\xf3\x15\x8a\x76\xe5\xa6\x9f\xc1\x69\xb4\xcd\x56\x69\xfd\xe6\x00\x4f\xc0\xf7\xa5\xd1\xdd\x21\x22\x6f\xc4\x08\xaa\xe7\xc6\x85\x2a\x78\x23\x98\xf5\x1f\xac\x33\x42\xb5\xf4\xac\x60\xb6\x97\xc2\x51\x32\x25\x11\x4d\xce\x43\xd4\xfe\xf9\xec\x97\xd1\x81\xd4\xbc\x7e\x3a\xdc\xe0\x3a\xd6\x2b\x21\xa0\x52\x57\x3c\xa8\xb0\x9e\xbb\x55\xcc\x5b\x0c\x93\xf1\x8f\xfc\x9e\x3e\xc4\x9a\x78\x23\xcf\x81\x4c\x79\x2f\xa6\xde\xc8\x29\x81\xd7\xf1\x78\x2a\x58\xcd\x1d\xbf\xdd\xf6\x78\x0e\xe4\xa3\xd5\x8a\x4c\x00\x76\x05\xe3\x72\xc3\xb7\x76\xec\xc4\xa0\x95\x30\x00\x88\x06\xe8\xff\x82\x80\xe9\xf5\x20\x03\xb0\x2b\xbd\xb9\x34\x46\x9b\xa8\xcb\x30\x7c\x46\x28\xe1\x2f\xc5\x99\x56\xbb\x49\xfc\x89\xa5\xd3\xde\x85\x60\xe2\x89\xb8\x28\xf3\x81\x08\x1a\x16\x59\xe3\xd5\xab\xf4\xc1\x82\xf0\xd3\x27\x20\x64\xbe\x6f\x6a\x76\xc7\x25\xf5\x46\x16\xac\xd1\x95\xb7\x34\xfb\xf4\x46\x5e\x88\x7a\xb9\xe2\xaa\xc5\x24\xdb\x85\xfa\xa5\xec\x06\xac\xef\x85\x5a\x3f\xdd\x9c\x31\xff\x71\x73\x9f\x5b\x6d\x44\x2b\x14\xbc\x06\xb2\xcf\xde\x3c\x84\x11\x26\x90\x39\xbc\x77\x94\x90\x22\xfa\x65\x06\x3b\x7d\x87\x4b\xc9\x43\x8f\x35\xbe\x5a\x0f\x1b\xbc\xae\xb3\x54\x0a\xb5\x0e\xf5\xcf\xbe\x78\x9c\xcb\x67\x26\x81\x70\x52\x0c\x06\x9c\x33\x94\xac\x0c\x36\xa4\x0c\x00\xb3\x38\xba\x1f\x97\xbc\xef\x51\xd5\xb7\x9a\x06\x6c\xa3\x93\xd5\x8b\x4e\x6c\xcf\xd5\xe8\x67\x0f\x74\xa5\x1c\x39\xf4\x92\xe9\xe2\x79\x4f\x31\x1f\x71\xba\x9c\xe1\xca\x46\xb2\x2a\x81\xd8\x8a\x4b\xfc\x89\x9e\x15\x39\xea\x16\xdd\x0d\x4a\xcc\xad\xcd\x2c\xba\x77\xdc\xe2\x5b\x55\x5f\xde\xbb\x80\x87\xe7\x41\x2e\x61\x56\xc2\xb8\x38\x3b\x98\xc0\x7d\xbb\x1d\xd6\xb0\x43\x6b\x79\x9b\xcb\xf8\x77\xb5\x49\x55\x38\x0e\x39\x55\x2c\x05\x83\x43\x62\xb2\x99\xcb\xeb\xeb\xab\xeb\x73\x08\x1d\x30\x78\xfa\x57\x99\x18\x62\x59\x89\x1a\x2f\x0c\xdf\xa0\xf9\xeb\xc8\xbf\x6c\x67\xf6\xc8\xce\x61\xcf\x3f\x4d\x1e\xf9\x12\x18\xc6\xa6\x60\xce\x88\x2e\x8d\x47\x98\xea\xb8\xbd\x18\x38\x7c\x98\xed\x71\x78\xe3\xe8\xe6\xdd\x48\x6e\x32\xc6\x3a\xe2\x7f\x64\x6a\x38\x1f\x2e\x24\xd6\xf0\x1a\xbf\x56\xf4\xcd\x6c\x96\x86\x11\x50\x5a\x3c\x56\xb8\xf2\x6e\xd4\x88\x61\x45\xba\xd6\x8a\x12\xeb\x3f\x74\xc2\x91\x72\x8c\x2a\x97\x19\x59\x6f\xf0\x0e\x95\xbb\xc0\x86\x7b\x99\x69\xfe\x9f\x31\xe5\xc0\x36\xcf\xa6\xe5\x98\x49\x5d\x22\xca\x1f\xae\x6e\x6e\xf3\x7d\x17\x8e\xbe\x4c\xae\x70\x0e\xdf\xdc\x5c\x7d\xcf\xd2\x1d\x20\x9a\x2d\x7d\xc8\xa7\xc2\xff\x5d\xf1\x98\x86\xe1\xbf\xc1\xc3\xf3\xd1\x43\x5c\x8f\xf6\x8f\x8b\xfd\x82\xd9\x03\x0a\x1f\x99\x7b\x64\xf8\x5c\x9f\xb4\x1f\x17\x07\xd4\x7e\xd4\x43\xc1\xaf\x75\xda\x6c\x99\xc1\x5e\xf2\x0a\x6f\x1c\x77\x48\x1f\x76\x25\x28\x2f\x65\x09\x64\x8a\xb5\x70\xfb\xf4\xef\xa1\x0d\x54\x4f\x0f\xa4\xbb\xe1\x36\x08\x15\x8e\x55\x0f\x1d\xb6\xc6\x6d\xad\x37\x8a\x94\x8f\xe6\x28\x4f\x78\x50\xe8\xb9\x75\xf8\xfc\x76\x15\x05\xc7\xfb\xc1\x43\x68\xef\xa8\x21\x45\xb5\x7e\xa2\x85\xf7\x8d\x47\xc8\xf8\x46\x49\x0d\x9f\x72\x7c\x7c\x99\x45\xe0\xf9\xc9\xc2\xeb\xfa\x32\xb4\xff\x7b\x61\x1d\x2a\x34\x94\xa4\xc7\x12\x29\xf3\xab\xa9\x98\x4f\xd2\x47\x38\x79\x6c\x29\xbc\x33\x62\xa3\xef\x8a\xf0\xf3\x67\x00\x00\x00\xff\xff\x02\x84\xe0\x0d\x7b\x0a\x00\x00"

func indexJsBytes() ([]byte, error) {
	return bindataRead(
		_indexJs,
		"index.js",
	)
}

func indexJs() (*asset, error) {
	bytes, err := indexJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.js", size: 2683, mode: os.FileMode(436), modTime: time.Unix(1517201890, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _linksCss = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8f\x41\x6e\xe3\x30\x0c\x45\xf7\x73\x0a\x03\x59\x64\x33\x0a\x94\x38\x28\x5a\xfa\x16\xbd\x01\x63\x49\x36\x11\x46\x14\x24\xba\xb6\x2b\xf4\xee\x45\x90\xb8\x40\x16\x5c\x10\x7c\x7c\xf8\xff\x22\x6e\xad\x17\xec\xaf\x43\x96\x29\x3a\xd8\x85\x10\xba\x20\x51\x4d\xc0\x1b\xf1\x0a\xfb\x4f\x64\x3f\xe3\xba\xff\xdf\x14\x8c\xc5\x14\x9f\xe9\x49\x14\xfa\xf6\x70\x3e\xa5\xe5\xb1\xce\x9e\x86\x51\xa1\xb5\xf6\xe7\xc0\x14\xaf\xa5\xce\xe4\x74\x84\x77\x6b\xd3\xd2\xdd\x30\x0f\x14\xc1\x36\x38\xa9\x3c\x81\x06\x6b\x2f\x2c\x19\x76\xf6\x23\x74\xea\x17\x35\xce\xf7\x92\x51\x49\x22\x44\x89\xfe\x0f\x84\x51\xbe\x7c\xae\x92\xb0\x27\x5d\xc1\x1e\xde\xb6\xd3\x21\x4c\xcc\x66\xca\xbc\xb9\x9c\x73\x0f\x57\x19\xd1\xc9\x0c\xc7\xb4\x34\xf7\xb1\xcd\xbd\xdc\xf6\x36\x1e\x37\xbe\x6d\xdb\x67\x3a\x73\x11\x55\xb9\xc1\xd9\xa6\x65\xe3\x26\xae\x09\x9d\xa3\x38\x80\xed\x98\x8a\x9a\xa2\x2b\x7b\xa3\x6b\xf2\x2f\x11\x27\x6e\x98\xea\xab\xe8\x74\x17\xfd\xfb\x0d\x00\x00\xff\xff\xb8\xc8\x00\x8a\x64\x01\x00\x00"

func linksCssBytes() ([]byte, error) {
	return bindataRead(
		_linksCss,
		"links.css",
	)
}

func linksCss() (*asset, error) {
	bytes, err := linksCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "links.css", size: 356, mode: os.FileMode(436), modTime: time.Unix(1517201890, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _linksHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x52\x4d\x8f\x94\x40\x10\xbd\xef\xaf\x28\x3b\x7b\x5c\x28\x36\x7a\x30\xd8\x8d\x31\xab\xf1\xb2\x89\x66\x33\x1e\x3c\xf6\x40\x01\x1d\x1a\x7a\xa4\x0b\x94\x10\xfe\xbb\x69\x60\xe2\xcc\x98\x98\x58\x97\x4e\xd5\xab\x8f\xf7\x5e\x5a\xbe\xfa\xf8\xe5\xe9\xf0\xfd\xeb\x27\xa8\xb9\xb5\xd9\x9d\x3c\x3f\xa4\x8b\xec\x0e\x00\x40\xb2\x61\x4b\xd9\x67\x07\x69\x0a\x1f\x72\x36\x23\xc1\xb3\xe9\x1a\x2f\x71\x43\xb6\xae\x96\x58\x43\xcd\x7c\x8a\xe8\xc7\x60\x46\x25\x9e\x5c\xc7\xd4\x71\x74\x98\x4e\x24\x20\xdf\x32\x25\x98\x7e\x31\x86\x23\xef\x20\xaf\x75\xef\x89\xd5\xc0\x65\xf4\x56\xe0\xbe\xc8\x9a\xae\x81\xba\xa7\x52\x09\xf4\x18\x32\x1f\xe7\xde\x8b\x15\x0d\xd1\x93\x55\xc2\xf3\x64\xc9\xd7\x44\x2c\xfe\x9e\x0b\x34\x7c\x8a\x58\xba\x8e\x7d\x5c\x39\x57\x59\xd2\x27\xe3\xe3\xdc\xb5\x98\x7b\xff\xbe\xd4\xad\xb1\x93\x7a\xd1\x96\x7e\xea\x29\x7d\x93\x24\x0f\xaf\x93\xe4\x5f\x27\x24\x6e\x8e\xc8\xa3\x2b\xa6\xfd\x62\x61\x46\xc8\xad\xf6\x5e\x89\x95\xe6\xce\x64\xc5\xea\xc7\x6c\xf7\xca\x6e\x5e\xd5\x8f\x17\xe8\x60\xff\x24\x21\xe6\x19\x7a\xdd\x55\x04\xf7\x0d\x4d\x0f\x70\xdf\xbb\x81\x09\x52\x05\x31\x2c\xcb\x55\xa7\xb4\xe6\x7a\x74\x2d\xea\x5d\xf8\x3c\xef\xb3\xf1\xb7\x97\x67\x58\x16\x91\x55\x0e\x43\xb1\xa1\x09\x96\x45\xa2\xce\xe4\xb1\x07\xfc\x9f\x15\x67\x89\xe5\x60\x6d\x34\xf4\x56\x64\xb7\x2d\x61\xed\x35\x49\xbc\x65\x39\xcf\x40\x5d\x71\x29\x46\xe2\xd9\x04\x89\x85\x19\x83\xc3\x9b\xb5\x12\xb7\x2f\xf8\x3b\x00\x00\xff\xff\x59\x5f\xf5\xba\x9a\x02\x00\x00"

func linksHtmlBytes() ([]byte, error) {
	return bindataRead(
		_linksHtml,
		"links.html",
	)
}

func linksHtml() (*asset, error) {
	bytes, err := linksHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "links.html", size: 666, mode: os.FileMode(436), modTime: time.Unix(1517201890, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"close.svg": closeSvg,
	"edit.css": editCss,
	"edit.html": editHtml,
	"edit.js": editJs,
	"index.js": indexJs,
	"links.css": linksCss,
	"links.html": linksHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"close.svg": &bintree{closeSvg, map[string]*bintree{}},
	"edit.css": &bintree{editCss, map[string]*bintree{}},
	"edit.html": &bintree{editHtml, map[string]*bintree{}},
	"edit.js": &bintree{editJs, map[string]*bintree{}},
	"index.js": &bintree{indexJs, map[string]*bintree{}},
	"links.css": &bintree{linksCss, map[string]*bintree{}},
	"links.html": &bintree{linksHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

